
Test_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004134  08004134  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004134  08004134  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004134  08004134  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800413c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  080041a4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080041a4  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbad  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c52  00000000  00000000  0002dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c3  00000000  00000000  00030560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd42  00000000  00000000  00030f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc16  00000000  00000000  0004dc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7932  00000000  00000000  0005d87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b9c  00000000  00000000  001051b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00108d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800405c 	.word	0x0800405c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800405c 	.word	0x0800405c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__io_putchar>:
int testCase = 0;


#ifdef __GNUC__
int __io_putchar(int ch)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xffff);
 8000278:	1d39      	adds	r1, r7, #4
 800027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800027e:	2201      	movs	r2, #1
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <__io_putchar+0x20>)
 8000282:	f002 fbdd 	bl	8002a40 <HAL_UART_Transmit>
    return ch;
 8000286:	687b      	ldr	r3, [r7, #4]
}
 8000288:	4618      	mov	r0, r3
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200000dc 	.word	0x200000dc

08000294 <printInfo>:
}
#endif


void printInfo()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
    xlog("%s:%d, ========================== \n\r", __func__, __LINE__);
 8000298:	221b      	movs	r2, #27
 800029a:	4912      	ldr	r1, [pc, #72]	; (80002e4 <printInfo+0x50>)
 800029c:	4812      	ldr	r0, [pc, #72]	; (80002e8 <printInfo+0x54>)
 800029e:	f003 f867 	bl	8003370 <iprintf>

    if (testCase == 0){
 80002a2:	4b12      	ldr	r3, [pc, #72]	; (80002ec <printInfo+0x58>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d107      	bne.n	80002ba <printInfo+0x26>
        xlog("%s:%d, SystemCoreClock:%ld \n\r", __func__, __LINE__, SystemCoreClock);
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <printInfo+0x5c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	221e      	movs	r2, #30
 80002b0:	490c      	ldr	r1, [pc, #48]	; (80002e4 <printInfo+0x50>)
 80002b2:	4810      	ldr	r0, [pc, #64]	; (80002f4 <printInfo+0x60>)
 80002b4:	f003 f85c 	bl	8003370 <iprintf>
        testCounter +=1;
    } else if (testCase == 1) {
        testInt +=1;
    }

}
 80002b8:	e012      	b.n	80002e0 <printInfo+0x4c>
    } else if (testCase == 2) {
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <printInfo+0x58>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d105      	bne.n	80002ce <printInfo+0x3a>
        testCounter +=1;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <printInfo+0x64>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	3301      	adds	r3, #1
 80002c8:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <printInfo+0x64>)
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	e008      	b.n	80002e0 <printInfo+0x4c>
    } else if (testCase == 1) {
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <printInfo+0x58>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d104      	bne.n	80002e0 <printInfo+0x4c>
        testInt +=1;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <printInfo+0x68>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a07      	ldr	r2, [pc, #28]	; (80002fc <printInfo+0x68>)
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	080040bc 	.word	0x080040bc
 80002e8:	08004074 	.word	0x08004074
 80002ec:	2000008c 	.word	0x2000008c
 80002f0:	20000000 	.word	0x20000000
 80002f4:	0800409c 	.word	0x0800409c
 80002f8:	20000084 	.word	0x20000084
 80002fc:	20000088 	.word	0x20000088

08000300 <toggleUserLED>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (state == LED_On) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    #endif // G431RB
    
}
void toggleUserLED()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
    #if defined(F302R8)
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000308:	4802      	ldr	r0, [pc, #8]	; (8000314 <toggleUserLED+0x14>)
 800030a:	f000 fe0b 	bl	8000f24 <HAL_GPIO_TogglePin>
    #endif // F302R8

    #if defined(G431RB)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    #endif // G431RB
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	48000400 	.word	0x48000400

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 fb00 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f818 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f000 f8d6 	bl	80004d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000328:	f000 f856 	bl	80003d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800032c:	f000 f8a2 	bl	8000474 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  testCase = -1;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <main+0x30>)
 8000332:	f04f 32ff 	mov.w	r2, #4294967295
 8000336:	601a      	str	r2, [r3, #0]
  testInt = 0;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <main+0x34>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
  testCounter = 0;
 800033e:	4b04      	ldr	r3, [pc, #16]	; (8000350 <main+0x38>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000344:	e7fe      	b.n	8000344 <main+0x2c>
 8000346:	bf00      	nop
 8000348:	2000008c 	.word	0x2000008c
 800034c:	20000088 	.word	0x20000088
 8000350:	20000084 	.word	0x20000084

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	; 0x40
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 f859 	bl	800341a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	2310      	movs	r3, #16
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000382:	2302      	movs	r3, #2
 8000384:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000386:	2300      	movs	r3, #0
 8000388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800038a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fe03 	bl	8000fa0 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003a0:	f000 f91e 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2302      	movs	r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2102      	movs	r1, #2
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fe2c 	bl	800201c <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ca:	f000 f909 	bl	80005e0 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3740      	adds	r7, #64	; 0x40
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_TIM2_Init+0x98>)
 80003f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <MX_TIM2_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_TIM2_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <MX_TIM2_Init+0x98>)
 800040c:	f04f 32ff 	mov.w	r2, #4294967295
 8000410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <MX_TIM2_Init+0x98>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_TIM2_Init+0x98>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800041e:	4814      	ldr	r0, [pc, #80]	; (8000470 <MX_TIM2_Init+0x98>)
 8000420:	f002 f832 	bl	8002488 <HAL_TIM_Base_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800042a:	f000 f8d9 	bl	80005e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	480d      	ldr	r0, [pc, #52]	; (8000470 <MX_TIM2_Init+0x98>)
 800043c:	f002 f87b 	bl	8002536 <HAL_TIM_ConfigClockSource>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000446:	f000 f8cb 	bl	80005e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4619      	mov	r1, r3
 8000456:	4806      	ldr	r0, [pc, #24]	; (8000470 <MX_TIM2_Init+0x98>)
 8000458:	f002 fa3e 	bl	80028d8 <HAL_TIMEx_MasterConfigSynchronization>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000462:	f000 f8bd 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000090 	.word	0x20000090

08000474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_USART2_UART_Init+0x58>)
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <MX_USART2_UART_Init+0x5c>)
 800047c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_USART2_UART_Init+0x58>)
 8000480:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART2_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART2_UART_Init+0x58>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART2_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART2_UART_Init+0x58>)
 80004b8:	f002 fa74 	bl	80029a4 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 f88d 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000dc 	.word	0x200000dc
 80004d0:	40004400 	.word	0x40004400

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <MX_GPIO_Init+0x100>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a39      	ldr	r2, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x100>)
 80004f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <MX_GPIO_Init+0x100>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_GPIO_Init+0x100>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a2d      	ldr	r2, [pc, #180]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f000 fccf 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	481e      	ldr	r0, [pc, #120]	; (80005d8 <MX_GPIO_Init+0x104>)
 800055e:	f000 fcc9 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : push_button_Pin */
  GPIO_InitStruct.Pin = push_button_Pin;
 8000562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000568:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(push_button_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4818      	ldr	r0, [pc, #96]	; (80005dc <MX_GPIO_Init+0x108>)
 800057a:	f000 fb49 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800057e:	2320      	movs	r3, #32
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f000 fb3a 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <MX_GPIO_Init+0x104>)
 80005b6:	f000 fb2b 	bl	8000c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2028      	movs	r0, #40	; 0x28
 80005c0:	f000 faef 	bl	8000ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005c4:	2028      	movs	r0, #40	; 0x28
 80005c6:	f000 fb08 	bl	8000bda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400
 80005dc:	48000800 	.word	0x48000800

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_MspInit+0x44>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <HAL_MspInit+0x44>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_MspInit+0x44>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000622:	2007      	movs	r0, #7
 8000624:	f000 fab2 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000644:	d10b      	bne.n	800065e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_TIM_Base_MspInit+0x38>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_TIM_Base_MspInit+0x38>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_TIM_Base_MspInit+0x38>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_UART_MspInit+0x7c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d128      	bne.n	80006e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0x80>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <HAL_UART_MspInit+0x80>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_MspInit+0x80>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006c2:	230c      	movs	r3, #12
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006d2:	2307      	movs	r3, #7
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 fa96 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40004400 	.word	0x40004400
 80006f0:	40021000 	.word	0x40021000

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f934 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(push_button_Pin);
 800074c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000750:	f000 fc02 	bl	8000f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  toggleUserLED();
 8000754:	f7ff fdd4 	bl	8000300 <toggleUserLED>
  printInfo();
 8000758:	f7ff fd9c 	bl	8000294 <printInfo>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e00a      	b.n	8000788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000772:	f3af 8000 	nop.w
 8000776:	4601      	mov	r1, r0
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	60ba      	str	r2, [r7, #8]
 800077e:	b2ca      	uxtb	r2, r1
 8000780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3301      	adds	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbf0      	blt.n	8000772 <_read+0x12>
  }

  return len;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e009      	b.n	80007c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd5b 	bl	8000270 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf1      	blt.n	80007ac <_write+0x12>
  }
  return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_close>:

int _close(int file)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007fa:	605a      	str	r2, [r3, #4]
  return 0;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_isatty>:

int _isatty(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <_sbrk+0x5c>)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <_sbrk+0x60>)
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_sbrk+0x64>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <_sbrk+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d207      	bcs.n	800087c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800086c:	f002 fe24 	bl	80034b8 <__errno>
 8000870:	4603      	mov	r3, r0
 8000872:	220c      	movs	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e009      	b.n	8000890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <_sbrk+0x64>)
 800088c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20004000 	.word	0x20004000
 800089c:	00000400 	.word	0x00000400
 80008a0:	20000164 	.word	0x20000164
 80008a4:	200002b8 	.word	0x200002b8

080008a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ac:	f000 f826 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f002 fdf5 	bl	80034c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008da:	f7ff fd1d 	bl	8000318 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008ec:	0800413c 	.word	0x0800413c
  ldr r2, =_sbss
 80008f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008f4:	200002b8 	.word	0x200002b8

080008f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_IRQHandler>
	...

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x28>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x28>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f92b 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fe56 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f943 	bl	8000bf6 <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f90b 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000168 	.word	0x20000168

080009d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000168 	.word	0x20000168

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db0b      	blt.n	8000a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 021f 	and.w	r2, r3, #31
 8000a68:	4907      	ldr	r1, [pc, #28]	; (8000a88 <__NVIC_EnableIRQ+0x38>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	2001      	movs	r0, #1
 8000a72:	fa00 f202 	lsl.w	r2, r0, r2
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff29 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff3e 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff8e 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5d 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff31 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffa2 	bl	8000b48 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1e:	e14e      	b.n	8000ebe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 8140 	beq.w	8000eb8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d005      	beq.n	8000c50 <HAL_GPIO_Init+0x40>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d130      	bne.n	8000cb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c86:	2201      	movs	r2, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	f003 0201 	and.w	r2, r3, #1
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d017      	beq.n	8000cee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	2203      	movs	r2, #3
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d123      	bne.n	8000d42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	691a      	ldr	r2, [r3, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	6939      	ldr	r1, [r7, #16]
 8000d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0203 	and.w	r2, r3, #3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 809a 	beq.w	8000eb8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	4b55      	ldr	r3, [pc, #340]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b52      	ldr	r3, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d9c:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1e0>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a46      	ldr	r2, [pc, #280]	; (8000ee4 <HAL_GPIO_Init+0x2d4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1dc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <HAL_GPIO_Init+0x2d8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1d8>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a44      	ldr	r2, [pc, #272]	; (8000eec <HAL_GPIO_Init+0x2dc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1d4>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x1e2>
 8000de4:	2305      	movs	r3, #5
 8000de6:	e004      	b.n	8000df2 <HAL_GPIO_Init+0x1e2>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0x1e2>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <HAL_GPIO_Init+0x1e2>
 8000df0:	2300      	movs	r3, #0
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4093      	lsls	r3, r2
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e02:	4937      	ldr	r1, [pc, #220]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e34:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e5e:	4a24      	ldr	r2, [pc, #144]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_GPIO_Init+0x2e0>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f47f aea9 	bne.w	8000c20 <HAL_GPIO_Init+0x10>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	48000800 	.word	0x48000800
 8000eec:	48000c00 	.word	0x48000c00
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	041a      	lsls	r2, r3, #16
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43d9      	mvns	r1, r3
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	400b      	ands	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f806 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010400 	.word	0x40010400

08000f88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f001 b823 	b.w	800200c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 817d 	beq.w	80012d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fdc:	4bbc      	ldr	r3, [pc, #752]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d00c      	beq.n	8001002 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe8:	4bb9      	ldr	r3, [pc, #740]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d15c      	bne.n	80010ae <HAL_RCC_OscConfig+0x10e>
 8000ff4:	4bb6      	ldr	r3, [pc, #728]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d155      	bne.n	80010ae <HAL_RCC_OscConfig+0x10e>
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001016:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x94>
 800102e:	4ba8      	ldr	r3, [pc, #672]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	e015      	b.n	8001060 <HAL_RCC_OscConfig+0xc0>
 8001034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001038:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800104c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001050:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800105c:	4b9c      	ldr	r3, [pc, #624]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001064:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001068:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800106c:	fa92 f2a2 	rbit	r2, r2
 8001070:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001074:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001078:	fab2 f282 	clz	r2, r2
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f042 0220 	orr.w	r2, r2, #32
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f002 021f 	and.w	r2, r2, #31
 8001088:	2101      	movs	r1, #1
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	4013      	ands	r3, r2
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 811f 	beq.w	80012d4 <HAL_RCC_OscConfig+0x334>
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 8116 	bne.w	80012d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f000 bfaf 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x12e>
 80010c0:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a82      	ldr	r2, [pc, #520]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e036      	b.n	800113c <HAL_RCC_OscConfig+0x19c>
 80010ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x158>
 80010de:	4b7c      	ldr	r3, [pc, #496]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a7b      	ldr	r2, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a78      	ldr	r2, [pc, #480]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e021      	b.n	800113c <HAL_RCC_OscConfig+0x19c>
 80010f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x184>
 800110a:	4b71      	ldr	r3, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a70      	ldr	r2, [pc, #448]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6d      	ldr	r2, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0x19c>
 8001124:	4b6a      	ldr	r3, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a66      	ldr	r2, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	f023 020f 	bic.w	r2, r3, #15
 8001144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	495f      	ldr	r1, [pc, #380]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001152:	4313      	orrs	r3, r2
 8001154:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d059      	beq.n	800121a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fc35 	bl	80009d4 <HAL_GetTick>
 800116a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fc30 	bl	80009d4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	d902      	bls.n	8001186 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	f000 bf43 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800119a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d102      	bne.n	80011b8 <HAL_RCC_OscConfig+0x218>
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	e015      	b.n	80011e4 <HAL_RCC_OscConfig+0x244>
 80011b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011f0:	fa92 f2a2 	rbit	r2, r2
 80011f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	f042 0220 	orr.w	r2, r2, #32
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	f002 021f 	and.w	r2, r2, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ab      	beq.n	8001170 <HAL_RCC_OscConfig+0x1d0>
 8001218:	e05d      	b.n	80012d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fbdb 	bl	80009d4 <HAL_GetTick>
 800121e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fbd6 	bl	80009d4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d902      	bls.n	800123a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	f000 bee9 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 800123a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800124e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	095b      	lsrs	r3, r3, #5
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x2cc>
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e015      	b.n	8001298 <HAL_RCC_OscConfig+0x2f8>
 800126c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001270:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001288:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012a4:	fa92 f2a2 	rbit	r2, r2
 80012a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012b0:	fab2 f282 	clz	r2, r2
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f002 021f 	and.w	r2, r2, #31
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1ab      	bne.n	8001224 <HAL_RCC_OscConfig+0x284>
 80012cc:	e003      	b.n	80012d6 <HAL_RCC_OscConfig+0x336>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 817d 	beq.w	80015e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012ec:	4ba6      	ldr	r3, [pc, #664]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012f8:	4ba3      	ldr	r3, [pc, #652]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d172      	bne.n	80013ea <HAL_RCC_OscConfig+0x44a>
 8001304:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d16c      	bne.n	80013ea <HAL_RCC_OscConfig+0x44a>
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001322:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x3a0>
 800133a:	4b93      	ldr	r3, [pc, #588]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	e013      	b.n	8001368 <HAL_RCC_OscConfig+0x3c8>
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001358:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001364:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800136e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001372:	fa92 f2a2 	rbit	r2, r2
 8001376:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800137a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x410>
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d002      	beq.n	80013b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	f000 be2e 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b75      	ldr	r3, [pc, #468]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	21f8      	movs	r1, #248	; 0xf8
 80013c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013ce:	fa91 f1a1 	rbit	r1, r1
 80013d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013da:	fab1 f181 	clz	r1, r1
 80013de:	b2c9      	uxtb	r1, r1
 80013e0:	408b      	lsls	r3, r1
 80013e2:	4969      	ldr	r1, [pc, #420]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	e0fd      	b.n	80015e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8088 	beq.w	800150c <HAL_RCC_OscConfig+0x56c>
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800140e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	461a      	mov	r2, r3
 8001424:	2301      	movs	r3, #1
 8001426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fad4 	bl	80009d4 <HAL_GetTick>
 800142c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff facf 	bl	80009d4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d902      	bls.n	8001448 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	f000 bde2 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800145a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d102      	bne.n	8001478 <HAL_RCC_OscConfig+0x4d8>
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	e013      	b.n	80014a0 <HAL_RCC_OscConfig+0x500>
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001490:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	2202      	movs	r2, #2
 80014a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014aa:	fa92 f2a2 	rbit	r2, r2
 80014ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f042 0220 	orr.w	r2, r2, #32
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	f002 021f 	and.w	r2, r2, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0af      	beq.n	8001432 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	21f8      	movs	r1, #248	; 0xf8
 80014e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014f0:	fa91 f1a1 	rbit	r1, r1
 80014f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014fc:	fab1 f181 	clz	r1, r1
 8001500:	b2c9      	uxtb	r1, r1
 8001502:	408b      	lsls	r3, r1
 8001504:	4920      	ldr	r1, [pc, #128]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
 800150a:	e06c      	b.n	80015e6 <HAL_RCC_OscConfig+0x646>
 800150c:	2301      	movs	r3, #1
 800150e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800151e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800152c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	461a      	mov	r2, r3
 8001534:	2300      	movs	r3, #0
 8001536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa4c 	bl	80009d4 <HAL_GetTick>
 800153c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fa47 	bl	80009d4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d902      	bls.n	8001558 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	f000 bd5a 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800156a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	095b      	lsrs	r3, r3, #5
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d104      	bne.n	800158c <HAL_RCC_OscConfig+0x5ec>
 8001582:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_RCC_OscConfig+0x5e8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	e015      	b.n	80015b4 <HAL_RCC_OscConfig+0x614>
 8001588:	40021000 	.word	0x40021000
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015b0:	4bc8      	ldr	r3, [pc, #800]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2202      	movs	r2, #2
 80015b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015be:	fa92 f2a2 	rbit	r2, r2
 80015c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015ca:	fab2 f282 	clz	r2, r2
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f042 0220 	orr.w	r2, r2, #32
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	f002 021f 	and.w	r2, r2, #31
 80015da:	2101      	movs	r1, #1
 80015dc:	fa01 f202 	lsl.w	r2, r1, r2
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ad      	bne.n	8001542 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8110 	beq.w	800181c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d079      	beq.n	8001700 <HAL_RCC_OscConfig+0x760>
 800160c:	2301      	movs	r3, #1
 800160e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800161e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4bab      	ldr	r3, [pc, #684]	; (80018d8 <HAL_RCC_OscConfig+0x938>)
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	461a      	mov	r2, r3
 8001632:	2301      	movs	r3, #1
 8001634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f9cd 	bl	80009d4 <HAL_GetTick>
 800163a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff f9c8 	bl	80009d4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d902      	bls.n	8001656 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	f000 bcdb 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b0:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80016b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016bc:	2102      	movs	r1, #2
 80016be:	6019      	str	r1, [r3, #0]
 80016c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	fa93 f1a3 	rbit	r1, r3
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016d6:	6019      	str	r1, [r3, #0]
  return result;
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0a0      	beq.n	8001640 <HAL_RCC_OscConfig+0x6a0>
 80016fe:	e08d      	b.n	800181c <HAL_RCC_OscConfig+0x87c>
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800172c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_OscConfig+0x938>)
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	461a      	mov	r2, r3
 800173e:	2300      	movs	r3, #0
 8001740:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff f947 	bl	80009d4 <HAL_GetTick>
 8001746:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff f942 	bl	80009d4 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d902      	bls.n	8001762 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	f000 bc55 	b.w	800200c <HAL_RCC_OscConfig+0x106c>
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80017d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017da:	2102      	movs	r1, #2
 80017dc:	6019      	str	r1, [r3, #0]
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	fa93 f1a3 	rbit	r1, r3
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017f4:	6019      	str	r1, [r3, #0]
  return result;
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d197      	bne.n	800174c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 81a1 	beq.w	8001b74 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d116      	bne.n	8001872 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	61d3      	str	r3, [r2, #28]
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800186a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a16      	ldr	r2, [pc, #88]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff f8a3 	bl	80009d4 <HAL_GetTick>
 800188e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	e009      	b.n	80018a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7ff f89e 	bl	80009d4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e3b1      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x93c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ef      	beq.n	8001894 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d10d      	bne.n	80018e0 <HAL_RCC_OscConfig+0x940>
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a02      	ldr	r2, [pc, #8]	; (80018d4 <HAL_RCC_OscConfig+0x934>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e03c      	b.n	800194c <HAL_RCC_OscConfig+0x9ac>
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000
 80018d8:	10908120 	.word	0x10908120
 80018dc:	40007000 	.word	0x40007000
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10c      	bne.n	800190a <HAL_RCC_OscConfig+0x96a>
 80018f0:	4bc1      	ldr	r3, [pc, #772]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4ac0      	ldr	r2, [pc, #768]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4bbe      	ldr	r3, [pc, #760]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4abd      	ldr	r2, [pc, #756]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e020      	b.n	800194c <HAL_RCC_OscConfig+0x9ac>
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x994>
 800191a:	4bb7      	ldr	r3, [pc, #732]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4ab6      	ldr	r2, [pc, #728]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4bb4      	ldr	r3, [pc, #720]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4ab3      	ldr	r2, [pc, #716]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x9ac>
 8001934:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4aaf      	ldr	r2, [pc, #700]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	4bad      	ldr	r3, [pc, #692]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4aac      	ldr	r2, [pc, #688]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8081 	beq.w	8001a60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff f839 	bl	80009d4 <HAL_GetTick>
 8001962:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff f834 	bl	80009d4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e345      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001988:	2202      	movs	r2, #2
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019ac:	2202      	movs	r2, #2
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019c6:	601a      	str	r2, [r3, #0]
  return result;
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0xa4c>
 80019e6:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0xa74>
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019f4:	2202      	movs	r2, #2
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	6011      	str	r1, [r2, #0]
 8001a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	fa92 f1a2 	rbit	r1, r2
 8001a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a36:	6011      	str	r1, [r2, #0]
  return result;
 8001a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d084      	beq.n	8001968 <HAL_RCC_OscConfig+0x9c8>
 8001a5e:	e07f      	b.n	8001b60 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7fe ffb8 	bl	80009d4 <HAL_GetTick>
 8001a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7fe ffb3 	bl	80009d4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e2c4      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ac8:	601a      	str	r2, [r3, #0]
  return result;
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ad2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0xb4e>
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	e013      	b.n	8001b16 <HAL_RCC_OscConfig+0xb76>
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b1e:	2102      	movs	r1, #2
 8001b20:	6011      	str	r1, [r2, #0]
 8001b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	fa92 f1a2 	rbit	r1, r2
 8001b30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b38:	6011      	str	r1, [r2, #0]
  return result;
 8001b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	fab2 f282 	clz	r2, r2
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f002 021f 	and.w	r2, r2, #31
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d184      	bne.n	8001a6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8242 	beq.w	800200a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCC_OscConfig+0xc58>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	f000 8213 	beq.w	8001fba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	f040 8162 	bne.w	8001e6a <HAL_RCC_OscConfig+0xeca>
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bca:	601a      	str	r2, [r3, #0]
  return result;
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7fe fef2 	bl	80009d4 <HAL_GetTick>
 8001bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	e00c      	b.n	8001c10 <HAL_RCC_OscConfig+0xc70>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe feea 	bl	80009d4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1fd      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c34:	601a      	str	r2, [r3, #0]
  return result;
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0xcba>
 8001c54:	4bb0      	ldr	r3, [pc, #704]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	e027      	b.n	8001caa <HAL_RCC_OscConfig+0xd0a>
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	4b9c      	ldr	r3, [pc, #624]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb6:	6011      	str	r1, [r2, #0]
 8001cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	fa92 f1a2 	rbit	r1, r2
 8001cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cce:	6011      	str	r1, [r2, #0]
  return result;
 8001cd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f002 021f 	and.w	r2, r2, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d182      	bne.n	8001bfc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	430b      	orrs	r3, r1
 8001d18:	497f      	ldr	r1, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d42:	601a      	str	r2, [r3, #0]
  return result;
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d4c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2301      	movs	r3, #1
 8001d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7fe fe36 	bl	80009d4 <HAL_GetTick>
 8001d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe fe31 	bl	80009d4 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e144      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001da6:	601a      	str	r2, [r3, #0]
  return result;
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001db0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d102      	bne.n	8001dcc <HAL_RCC_OscConfig+0xe2c>
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	e027      	b.n	8001e1c <HAL_RCC_OscConfig+0xe7c>
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e20:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e28:	6011      	str	r1, [r2, #0]
 8001e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e2e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fa92 f1a2 	rbit	r1, r2
 8001e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e40:	6011      	str	r1, [r2, #0]
  return result;
 8001e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	fab2 f282 	clz	r2, r2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f042 0220 	orr.w	r2, r2, #32
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f002 021f 	and.w	r2, r2, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d082      	beq.n	8001d6e <HAL_RCC_OscConfig+0xdce>
 8001e68:	e0cf      	b.n	800200a <HAL_RCC_OscConfig+0x106a>
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f2a3 	rbit	r2, r3
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e8e:	601a      	str	r2, [r3, #0]
  return result;
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2300      	movs	r3, #0
 8001eae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fd90 	bl	80009d4 <HAL_GetTick>
 8001eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fd8b 	bl	80009d4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e09e      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ef2:	601a      	str	r2, [r3, #0]
  return result;
 8001ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001efc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d104      	bne.n	8001f1c <HAL_RCC_OscConfig+0xf7c>
 8001f12:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <HAL_RCC_OscConfig+0xf78>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e029      	b.n	8001f6c <HAL_RCC_OscConfig+0xfcc>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x1078>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f70:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f78:	6011      	str	r1, [r2, #0]
 8001f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f7e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	fa92 f1a2 	rbit	r1, r2
 8001f88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f90:	6011      	str	r1, [r2, #0]
  return result;
 8001f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d180      	bne.n	8001eba <HAL_RCC_OscConfig+0xf1a>
 8001fb8:	e027      	b.n	800200a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e01e      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_OscConfig+0x1078>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b09e      	sub	sp, #120	; 0x78
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e162      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b8d      	ldr	r3, [pc, #564]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	498b      	ldr	r1, [pc, #556]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e14a      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b82      	ldr	r3, [pc, #520]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	497f      	ldr	r1, [pc, #508]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80dc 	beq.w	8002248 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d13c      	bne.n	8002112 <HAL_RCC_ClockConfig+0xf6>
 8002098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xa6>
 80020bc:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e00f      	b.n	80020e2 <HAL_RCC_ClockConfig+0xc6>
 80020c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64
 80020d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d4:	663b      	str	r3, [r7, #96]	; 0x60
 80020d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020ea:	fa92 f2a2 	rbit	r2, r2
 80020ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	f042 0220 	orr.w	r2, r2, #32
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f002 021f 	and.w	r2, r2, #31
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 f202 	lsl.w	r2, r1, r2
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d17b      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0f3      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d13c      	bne.n	8002194 <HAL_RCC_ClockConfig+0x178>
 800211a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <HAL_RCC_ClockConfig+0x128>
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e00f      	b.n	8002164 <HAL_RCC_ClockConfig+0x148>
 8002144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002148:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	647b      	str	r3, [r7, #68]	; 0x44
 8002152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002156:	643b      	str	r3, [r7, #64]	; 0x40
 8002158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002168:	63ba      	str	r2, [r7, #56]	; 0x38
 800216a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d13a      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b2      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
 8002194:	2302      	movs	r3, #2
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_ClockConfig+0x1a0>
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e00d      	b.n	80021d8 <HAL_RCC_ClockConfig+0x1bc>
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	2302      	movs	r3, #2
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2202      	movs	r2, #2
 80021da:	61ba      	str	r2, [r7, #24]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	fa92 f2a2 	rbit	r2, r2
 80021e2:	617a      	str	r2, [r7, #20]
  return result;
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e079      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	491a      	ldr	r1, [pc, #104]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002218:	f7fe fbdc 	bl	80009d4 <HAL_GetTick>
 800221c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	e00a      	b.n	8002236 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7fe fbd8 	bl	80009d4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e061      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_ClockConfig+0x260>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 020c 	and.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d1eb      	bne.n	8002220 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d214      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4906      	ldr	r1, [pc, #24]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_RCC_ClockConfig+0x25c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e040      	b.n	80022fa <HAL_RCC_ClockConfig+0x2de>
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	491a      	ldr	r1, [pc, #104]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4912      	ldr	r1, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022be:	f000 f829 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022c2:	4601      	mov	r1, r0
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_ClockConfig+0x2e8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	22f0      	movs	r2, #240	; 0xf0
 80022ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	60fa      	str	r2, [r7, #12]
  return result;
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	40d3      	lsrs	r3, r2
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x2ec>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_RCC_ClockConfig+0x2f0>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_ClockConfig+0x2f4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fb2a 	bl	800094c <HAL_InitTick>
  
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3778      	adds	r7, #120	; 0x78
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	080040c8 	.word	0x080040c8
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b08b      	sub	sp, #44	; 0x2c
 8002318:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x30>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x36>
 8002342:	e03c      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e03c      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002350:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002354:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	607a      	str	r2, [r7, #4]
  return result;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	40d3      	lsrs	r3, r2
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	220f      	movs	r2, #15
 8002378:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	60fa      	str	r2, [r7, #12]
  return result;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	e004      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	623b      	str	r3, [r7, #32]
      break;
 80023bc:	e002      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023c0:	623b      	str	r3, [r7, #32]
      break;
 80023c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	372c      	adds	r7, #44	; 0x2c
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	080040e0 	.word	0x080040e0
 80023e0:	080040f0 	.word	0x080040f0
 80023e4:	003d0900 	.word	0x003d0900

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002406:	f7ff ffef 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800240a:	4601      	mov	r1, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002414:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002418:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	fa92 f2a2 	rbit	r2, r2
 8002420:	603a      	str	r2, [r7, #0]
  return result;
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	fab2 f282 	clz	r2, r2
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	40d3      	lsrs	r3, r2
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_RCC_GetPCLK1Freq+0x40>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	080040d8 	.word	0x080040d8

08002444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800244a:	f7ff ffcd 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800244e:	4601      	mov	r1, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002458:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800245c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	fa92 f2a2 	rbit	r2, r2
 8002464:	603a      	str	r2, [r7, #0]
  return result;
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	40d3      	lsrs	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	080040d8 	.word	0x080040d8

08002488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e049      	b.n	800252e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe f8c0 	bl	8000634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f000 f8fe 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_TIM_ConfigClockSource+0x1c>
 800254e:	2302      	movs	r3, #2
 8002550:	e0b6      	b.n	80026c0 <HAL_TIM_ConfigClockSource+0x18a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002574:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258e:	d03e      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xd8>
 8002590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002594:	f200 8087 	bhi.w	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259c:	f000 8086 	beq.w	80026ac <HAL_TIM_ConfigClockSource+0x176>
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d87f      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025a6:	2b70      	cmp	r3, #112	; 0x70
 80025a8:	d01a      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xaa>
 80025aa:	2b70      	cmp	r3, #112	; 0x70
 80025ac:	d87b      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025ae:	2b60      	cmp	r3, #96	; 0x60
 80025b0:	d050      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0x11e>
 80025b2:	2b60      	cmp	r3, #96	; 0x60
 80025b4:	d877      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025b6:	2b50      	cmp	r3, #80	; 0x50
 80025b8:	d03c      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0xfe>
 80025ba:	2b50      	cmp	r3, #80	; 0x50
 80025bc:	d873      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d058      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x13e>
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d86f      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025c6:	2b30      	cmp	r3, #48	; 0x30
 80025c8:	d064      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15e>
 80025ca:	2b30      	cmp	r3, #48	; 0x30
 80025cc:	d86b      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d060      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15e>
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d867      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d05c      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15e>
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d05a      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15e>
 80025de:	e062      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	f000 f952 	bl	8002898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002602:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e04f      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	f000 f93b 	bl	8002898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002630:	609a      	str	r2, [r3, #8]
      break;
 8002632:	e03c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002640:	461a      	mov	r2, r3
 8002642:	f000 f8af 	bl	80027a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2150      	movs	r1, #80	; 0x50
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f908 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002652:	e02c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002660:	461a      	mov	r2, r3
 8002662:	f000 f8ce 	bl	8002802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2160      	movs	r1, #96	; 0x60
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f8f8 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002672:	e01c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002680:	461a      	mov	r2, r3
 8002682:	f000 f88f 	bl	80027a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f8e8 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 8002692:	e00c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f000 f8df 	bl	8002862 <TIM_ITRx_SetConfig>
      break;
 80026a4:	e003      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      break;
 80026aa:	e000      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x178>
      break;
 80026ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a2e      	ldr	r2, [pc, #184]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0x20>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d108      	bne.n	80026fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00f      	beq.n	8002722 <TIM_Base_SetConfig+0x5a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d00b      	beq.n	8002722 <TIM_Base_SetConfig+0x5a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a22      	ldr	r2, [pc, #136]	; (8002798 <TIM_Base_SetConfig+0xd0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x5a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <TIM_Base_SetConfig+0xd4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x5a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <TIM_Base_SetConfig+0xd8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <TIM_Base_SetConfig+0xcc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0xb0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <TIM_Base_SetConfig+0xd0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0xb0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <TIM_Base_SetConfig+0xd4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0xb0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <TIM_Base_SetConfig+0xd8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d103      	bne.n	8002780 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	615a      	str	r2, [r3, #20]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40014000 	.word	0x40014000
 800279c:	40014400 	.word	0x40014400
 80027a0:	40014800 	.word	0x40014800

080027a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f023 0201 	bic.w	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f023 030a 	bic.w	r3, r3, #10
 80027e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	621a      	str	r2, [r3, #32]
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0210 	bic.w	r2, r3, #16
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800282c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800283e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	f043 0307 	orr.w	r3, r3, #7
 8002884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e04f      	b.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d108      	bne.n	800292c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002920:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d004      	beq.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10c      	bne.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40014000 	.word	0x40014000

080029a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e040      	b.n	8002a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fd fe52 	bl	8000670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8b6 	bl	8002b54 <UART_SetConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e022      	b.n	8002a38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9e0 	bl	8002dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fa67 	bl	8002f04 <UART_CheckIdleState>
 8002a36:	4603      	mov	r3, r0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d178      	bne.n	8002b4a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_UART_Transmit+0x24>
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e071      	b.n	8002b4c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2221      	movs	r2, #33	; 0x21
 8002a74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a76:	f7fd ffad 	bl	80009d4 <HAL_GetTick>
 8002a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d108      	bne.n	8002aa8 <HAL_UART_Transmit+0x68>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d104      	bne.n	8002aa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e003      	b.n	8002ab0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab0:	e030      	b.n	8002b14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fac9 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e03c      	b.n	8002b4c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10b      	bne.n	8002af0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	3302      	adds	r3, #2
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e008      	b.n	8002b02 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b292      	uxth	r2, r2
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1c8      	bne.n	8002ab2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2200      	movs	r2, #0
 8002b28:	2140      	movs	r1, #64	; 0x40
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa92 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e005      	b.n	8002b4c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b8a      	ldr	r3, [pc, #552]	; (8002da8 <UART_SetConfig+0x254>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a78      	ldr	r2, [pc, #480]	; (8002dac <UART_SetConfig+0x258>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d120      	bne.n	8002c12 <UART_SetConfig+0xbe>
 8002bd0:	4b77      	ldr	r3, [pc, #476]	; (8002db0 <UART_SetConfig+0x25c>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d817      	bhi.n	8002c0c <UART_SetConfig+0xb8>
 8002bdc:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <UART_SetConfig+0x90>)
 8002bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be2:	bf00      	nop
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c07 	.word	0x08002c07
 8002bf0:	08002bfb 	.word	0x08002bfb
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e01d      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e01a      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e017      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e014      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e011      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <UART_SetConfig+0x260>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <UART_SetConfig+0xce>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e009      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <UART_SetConfig+0x264>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d102      	bne.n	8002c32 <UART_SetConfig+0xde>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e001      	b.n	8002c36 <UART_SetConfig+0xe2>
 8002c32:	2310      	movs	r3, #16
 8002c34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3e:	d15a      	bne.n	8002cf6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d827      	bhi.n	8002c96 <UART_SetConfig+0x142>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <UART_SetConfig+0xf8>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c81 	.word	0x08002c81
 8002c58:	08002c97 	.word	0x08002c97
 8002c5c:	08002c87 	.word	0x08002c87
 8002c60:	08002c97 	.word	0x08002c97
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002c97 	.word	0x08002c97
 8002c6c:	08002c8f 	.word	0x08002c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7ff fbc6 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8002c74:	61b8      	str	r0, [r7, #24]
        break;
 8002c76:	e013      	b.n	8002ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7ff fbe4 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	61b8      	str	r0, [r7, #24]
        break;
 8002c7e:	e00f      	b.n	8002ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c80:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <UART_SetConfig+0x268>)
 8002c82:	61bb      	str	r3, [r7, #24]
        break;
 8002c84:	e00c      	b.n	8002ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c86:	f7ff fb45 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8002c8a:	61b8      	str	r0, [r7, #24]
        break;
 8002c8c:	e008      	b.n	8002ca0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c92:	61bb      	str	r3, [r7, #24]
        break;
 8002c94:	e004      	b.n	8002ca0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d074      	beq.n	8002d90 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	005a      	lsls	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	d916      	bls.n	8002cf0 <UART_SetConfig+0x19c>
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d212      	bcs.n	8002cf0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	89fa      	ldrh	r2, [r7, #14]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e04f      	b.n	8002d90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77bb      	strb	r3, [r7, #30]
 8002cf4:	e04c      	b.n	8002d90 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d828      	bhi.n	8002d4e <UART_SetConfig+0x1fa>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_SetConfig+0x1b0>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d4f 	.word	0x08002d4f
 8002d14:	08002d3f 	.word	0x08002d3f
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d47 	.word	0x08002d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff fb6a 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	61b8      	str	r0, [r7, #24]
        break;
 8002d2e:	e013      	b.n	8002d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff fb88 	bl	8002444 <HAL_RCC_GetPCLK2Freq>
 8002d34:	61b8      	str	r0, [r7, #24]
        break;
 8002d36:	e00f      	b.n	8002d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <UART_SetConfig+0x268>)
 8002d3a:	61bb      	str	r3, [r7, #24]
        break;
 8002d3c:	e00c      	b.n	8002d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3e:	f7ff fae9 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8002d42:	61b8      	str	r0, [r7, #24]
        break;
 8002d44:	e008      	b.n	8002d58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d4a:	61bb      	str	r3, [r7, #24]
        break;
 8002d4c:	e004      	b.n	8002d58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	77bb      	strb	r3, [r7, #30]
        break;
 8002d56:	bf00      	nop
    }

    if (pclk != 0U)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	085a      	lsrs	r2, r3, #1
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d909      	bls.n	8002d8c <UART_SetConfig+0x238>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7e:	d205      	bcs.n	8002d8c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	e001      	b.n	8002d90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	efff69f3 	.word	0xefff69f3
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40004400 	.word	0x40004400
 8002db8:	40004800 	.word	0x40004800
 8002dbc:	007a1200 	.word	0x007a1200

08002dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ebe:	d10a      	bne.n	8002ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  }
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b098      	sub	sp, #96	; 0x60
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f14:	f7fd fd5e 	bl	80009d4 <HAL_GetTick>
 8002f18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d12e      	bne.n	8002f86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f30:	2200      	movs	r2, #0
 8002f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f88c 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d021      	beq.n	8002f86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f56:	653b      	str	r3, [r7, #80]	; 0x50
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
 8002f62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e6      	bne.n	8002f42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e062      	b.n	800304c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d149      	bne.n	8003028 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f856 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03c      	beq.n	8003028 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	623b      	str	r3, [r7, #32]
   return(result);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e6      	bne.n	8002fae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003000:	61fa      	str	r2, [r7, #28]
 8003002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	617b      	str	r3, [r7, #20]
   return(result);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e011      	b.n	800304c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3758      	adds	r7, #88	; 0x58
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	e049      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d045      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fd fcb1 	bl	80009d4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <UART_WaitOnFlagUntilTimeout+0x30>
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e048      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d031      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d110      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f838 	bl	8003122 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2208      	movs	r2, #8
 80030b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e029      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d4:	d111      	bne.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f81e 	bl	8003122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e00f      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	429a      	cmp	r2, r3
 8003116:	d0a6      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b095      	sub	sp, #84	; 0x54
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003148:	643b      	str	r3, [r7, #64]	; 0x40
 800314a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800314e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e6      	bne.n	800312a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3308      	adds	r3, #8
 8003162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	61fb      	str	r3, [r7, #28]
   return(result);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800317c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003194:	2b01      	cmp	r3, #1
 8003196:	d118      	bne.n	80031ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f023 0310 	bic.w	r3, r3, #16
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	613b      	str	r3, [r7, #16]
   return(result);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e6      	bne.n	8003198 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80031de:	bf00      	nop
 80031e0:	3754      	adds	r7, #84	; 0x54
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <std>:
 80031ec:	2300      	movs	r3, #0
 80031ee:	b510      	push	{r4, lr}
 80031f0:	4604      	mov	r4, r0
 80031f2:	e9c0 3300 	strd	r3, r3, [r0]
 80031f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031fa:	6083      	str	r3, [r0, #8]
 80031fc:	8181      	strh	r1, [r0, #12]
 80031fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003200:	81c2      	strh	r2, [r0, #14]
 8003202:	6183      	str	r3, [r0, #24]
 8003204:	4619      	mov	r1, r3
 8003206:	2208      	movs	r2, #8
 8003208:	305c      	adds	r0, #92	; 0x5c
 800320a:	f000 f906 	bl	800341a <memset>
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <std+0x58>)
 8003210:	6263      	str	r3, [r4, #36]	; 0x24
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <std+0x5c>)
 8003214:	62a3      	str	r3, [r4, #40]	; 0x28
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <std+0x60>)
 8003218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <std+0x64>)
 800321c:	6323      	str	r3, [r4, #48]	; 0x30
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <std+0x68>)
 8003220:	6224      	str	r4, [r4, #32]
 8003222:	429c      	cmp	r4, r3
 8003224:	d006      	beq.n	8003234 <std+0x48>
 8003226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800322a:	4294      	cmp	r4, r2
 800322c:	d002      	beq.n	8003234 <std+0x48>
 800322e:	33d0      	adds	r3, #208	; 0xd0
 8003230:	429c      	cmp	r4, r3
 8003232:	d105      	bne.n	8003240 <std+0x54>
 8003234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323c:	f000 b966 	b.w	800350c <__retarget_lock_init_recursive>
 8003240:	bd10      	pop	{r4, pc}
 8003242:	bf00      	nop
 8003244:	08003395 	.word	0x08003395
 8003248:	080033b7 	.word	0x080033b7
 800324c:	080033ef 	.word	0x080033ef
 8003250:	08003413 	.word	0x08003413
 8003254:	2000016c 	.word	0x2000016c

08003258 <stdio_exit_handler>:
 8003258:	4a02      	ldr	r2, [pc, #8]	; (8003264 <stdio_exit_handler+0xc>)
 800325a:	4903      	ldr	r1, [pc, #12]	; (8003268 <stdio_exit_handler+0x10>)
 800325c:	4803      	ldr	r0, [pc, #12]	; (800326c <stdio_exit_handler+0x14>)
 800325e:	f000 b869 	b.w	8003334 <_fwalk_sglue>
 8003262:	bf00      	nop
 8003264:	2000000c 	.word	0x2000000c
 8003268:	08003db9 	.word	0x08003db9
 800326c:	20000018 	.word	0x20000018

08003270 <cleanup_stdio>:
 8003270:	6841      	ldr	r1, [r0, #4]
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <cleanup_stdio+0x34>)
 8003274:	4299      	cmp	r1, r3
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	d001      	beq.n	8003280 <cleanup_stdio+0x10>
 800327c:	f000 fd9c 	bl	8003db8 <_fflush_r>
 8003280:	68a1      	ldr	r1, [r4, #8]
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <cleanup_stdio+0x38>)
 8003284:	4299      	cmp	r1, r3
 8003286:	d002      	beq.n	800328e <cleanup_stdio+0x1e>
 8003288:	4620      	mov	r0, r4
 800328a:	f000 fd95 	bl	8003db8 <_fflush_r>
 800328e:	68e1      	ldr	r1, [r4, #12]
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <cleanup_stdio+0x3c>)
 8003292:	4299      	cmp	r1, r3
 8003294:	d004      	beq.n	80032a0 <cleanup_stdio+0x30>
 8003296:	4620      	mov	r0, r4
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329c:	f000 bd8c 	b.w	8003db8 <_fflush_r>
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	bf00      	nop
 80032a4:	2000016c 	.word	0x2000016c
 80032a8:	200001d4 	.word	0x200001d4
 80032ac:	2000023c 	.word	0x2000023c

080032b0 <global_stdio_init.part.0>:
 80032b0:	b510      	push	{r4, lr}
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <global_stdio_init.part.0+0x30>)
 80032b4:	4c0b      	ldr	r4, [pc, #44]	; (80032e4 <global_stdio_init.part.0+0x34>)
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <global_stdio_init.part.0+0x38>)
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	4620      	mov	r0, r4
 80032bc:	2200      	movs	r2, #0
 80032be:	2104      	movs	r1, #4
 80032c0:	f7ff ff94 	bl	80031ec <std>
 80032c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80032c8:	2201      	movs	r2, #1
 80032ca:	2109      	movs	r1, #9
 80032cc:	f7ff ff8e 	bl	80031ec <std>
 80032d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032d4:	2202      	movs	r2, #2
 80032d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032da:	2112      	movs	r1, #18
 80032dc:	f7ff bf86 	b.w	80031ec <std>
 80032e0:	200002a4 	.word	0x200002a4
 80032e4:	2000016c 	.word	0x2000016c
 80032e8:	08003259 	.word	0x08003259

080032ec <__sfp_lock_acquire>:
 80032ec:	4801      	ldr	r0, [pc, #4]	; (80032f4 <__sfp_lock_acquire+0x8>)
 80032ee:	f000 b90e 	b.w	800350e <__retarget_lock_acquire_recursive>
 80032f2:	bf00      	nop
 80032f4:	200002ad 	.word	0x200002ad

080032f8 <__sfp_lock_release>:
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <__sfp_lock_release+0x8>)
 80032fa:	f000 b909 	b.w	8003510 <__retarget_lock_release_recursive>
 80032fe:	bf00      	nop
 8003300:	200002ad 	.word	0x200002ad

08003304 <__sinit>:
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
 8003308:	f7ff fff0 	bl	80032ec <__sfp_lock_acquire>
 800330c:	6a23      	ldr	r3, [r4, #32]
 800330e:	b11b      	cbz	r3, 8003318 <__sinit+0x14>
 8003310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003314:	f7ff bff0 	b.w	80032f8 <__sfp_lock_release>
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <__sinit+0x28>)
 800331a:	6223      	str	r3, [r4, #32]
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <__sinit+0x2c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f5      	bne.n	8003310 <__sinit+0xc>
 8003324:	f7ff ffc4 	bl	80032b0 <global_stdio_init.part.0>
 8003328:	e7f2      	b.n	8003310 <__sinit+0xc>
 800332a:	bf00      	nop
 800332c:	08003271 	.word	0x08003271
 8003330:	200002a4 	.word	0x200002a4

08003334 <_fwalk_sglue>:
 8003334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003338:	4607      	mov	r7, r0
 800333a:	4688      	mov	r8, r1
 800333c:	4614      	mov	r4, r2
 800333e:	2600      	movs	r6, #0
 8003340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003344:	f1b9 0901 	subs.w	r9, r9, #1
 8003348:	d505      	bpl.n	8003356 <_fwalk_sglue+0x22>
 800334a:	6824      	ldr	r4, [r4, #0]
 800334c:	2c00      	cmp	r4, #0
 800334e:	d1f7      	bne.n	8003340 <_fwalk_sglue+0xc>
 8003350:	4630      	mov	r0, r6
 8003352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003356:	89ab      	ldrh	r3, [r5, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d907      	bls.n	800336c <_fwalk_sglue+0x38>
 800335c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003360:	3301      	adds	r3, #1
 8003362:	d003      	beq.n	800336c <_fwalk_sglue+0x38>
 8003364:	4629      	mov	r1, r5
 8003366:	4638      	mov	r0, r7
 8003368:	47c0      	blx	r8
 800336a:	4306      	orrs	r6, r0
 800336c:	3568      	adds	r5, #104	; 0x68
 800336e:	e7e9      	b.n	8003344 <_fwalk_sglue+0x10>

08003370 <iprintf>:
 8003370:	b40f      	push	{r0, r1, r2, r3}
 8003372:	b507      	push	{r0, r1, r2, lr}
 8003374:	4906      	ldr	r1, [pc, #24]	; (8003390 <iprintf+0x20>)
 8003376:	ab04      	add	r3, sp, #16
 8003378:	6808      	ldr	r0, [r1, #0]
 800337a:	f853 2b04 	ldr.w	r2, [r3], #4
 800337e:	6881      	ldr	r1, [r0, #8]
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	f000 f9e9 	bl	8003758 <_vfiprintf_r>
 8003386:	b003      	add	sp, #12
 8003388:	f85d eb04 	ldr.w	lr, [sp], #4
 800338c:	b004      	add	sp, #16
 800338e:	4770      	bx	lr
 8003390:	20000064 	.word	0x20000064

08003394 <__sread>:
 8003394:	b510      	push	{r4, lr}
 8003396:	460c      	mov	r4, r1
 8003398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800339c:	f000 f868 	bl	8003470 <_read_r>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	bfab      	itete	ge
 80033a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033a6:	89a3      	ldrhlt	r3, [r4, #12]
 80033a8:	181b      	addge	r3, r3, r0
 80033aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033ae:	bfac      	ite	ge
 80033b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80033b2:	81a3      	strhlt	r3, [r4, #12]
 80033b4:	bd10      	pop	{r4, pc}

080033b6 <__swrite>:
 80033b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ba:	461f      	mov	r7, r3
 80033bc:	898b      	ldrh	r3, [r1, #12]
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	4605      	mov	r5, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	4616      	mov	r6, r2
 80033c6:	d505      	bpl.n	80033d4 <__swrite+0x1e>
 80033c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033cc:	2302      	movs	r3, #2
 80033ce:	2200      	movs	r2, #0
 80033d0:	f000 f83c 	bl	800344c <_lseek_r>
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033de:	81a3      	strh	r3, [r4, #12]
 80033e0:	4632      	mov	r2, r6
 80033e2:	463b      	mov	r3, r7
 80033e4:	4628      	mov	r0, r5
 80033e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ea:	f000 b853 	b.w	8003494 <_write_r>

080033ee <__sseek>:
 80033ee:	b510      	push	{r4, lr}
 80033f0:	460c      	mov	r4, r1
 80033f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f6:	f000 f829 	bl	800344c <_lseek_r>
 80033fa:	1c43      	adds	r3, r0, #1
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	bf15      	itete	ne
 8003400:	6560      	strne	r0, [r4, #84]	; 0x54
 8003402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800340a:	81a3      	strheq	r3, [r4, #12]
 800340c:	bf18      	it	ne
 800340e:	81a3      	strhne	r3, [r4, #12]
 8003410:	bd10      	pop	{r4, pc}

08003412 <__sclose>:
 8003412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003416:	f000 b809 	b.w	800342c <_close_r>

0800341a <memset>:
 800341a:	4402      	add	r2, r0
 800341c:	4603      	mov	r3, r0
 800341e:	4293      	cmp	r3, r2
 8003420:	d100      	bne.n	8003424 <memset+0xa>
 8003422:	4770      	bx	lr
 8003424:	f803 1b01 	strb.w	r1, [r3], #1
 8003428:	e7f9      	b.n	800341e <memset+0x4>
	...

0800342c <_close_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d06      	ldr	r5, [pc, #24]	; (8003448 <_close_r+0x1c>)
 8003430:	2300      	movs	r3, #0
 8003432:	4604      	mov	r4, r0
 8003434:	4608      	mov	r0, r1
 8003436:	602b      	str	r3, [r5, #0]
 8003438:	f7fd f9cb 	bl	80007d2 <_close>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_close_r+0x1a>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_close_r+0x1a>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	200002a8 	.word	0x200002a8

0800344c <_lseek_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4d07      	ldr	r5, [pc, #28]	; (800346c <_lseek_r+0x20>)
 8003450:	4604      	mov	r4, r0
 8003452:	4608      	mov	r0, r1
 8003454:	4611      	mov	r1, r2
 8003456:	2200      	movs	r2, #0
 8003458:	602a      	str	r2, [r5, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f7fd f9e0 	bl	8000820 <_lseek>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_lseek_r+0x1e>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_lseek_r+0x1e>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200002a8 	.word	0x200002a8

08003470 <_read_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d07      	ldr	r5, [pc, #28]	; (8003490 <_read_r+0x20>)
 8003474:	4604      	mov	r4, r0
 8003476:	4608      	mov	r0, r1
 8003478:	4611      	mov	r1, r2
 800347a:	2200      	movs	r2, #0
 800347c:	602a      	str	r2, [r5, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	f7fd f96e 	bl	8000760 <_read>
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d102      	bne.n	800348e <_read_r+0x1e>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	b103      	cbz	r3, 800348e <_read_r+0x1e>
 800348c:	6023      	str	r3, [r4, #0]
 800348e:	bd38      	pop	{r3, r4, r5, pc}
 8003490:	200002a8 	.word	0x200002a8

08003494 <_write_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4d07      	ldr	r5, [pc, #28]	; (80034b4 <_write_r+0x20>)
 8003498:	4604      	mov	r4, r0
 800349a:	4608      	mov	r0, r1
 800349c:	4611      	mov	r1, r2
 800349e:	2200      	movs	r2, #0
 80034a0:	602a      	str	r2, [r5, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7fd f979 	bl	800079a <_write>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_write_r+0x1e>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_write_r+0x1e>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	200002a8 	.word	0x200002a8

080034b8 <__errno>:
 80034b8:	4b01      	ldr	r3, [pc, #4]	; (80034c0 <__errno+0x8>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000064 	.word	0x20000064

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	4d0d      	ldr	r5, [pc, #52]	; (80034fc <__libc_init_array+0x38>)
 80034c8:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034ca:	1b64      	subs	r4, r4, r5
 80034cc:	10a4      	asrs	r4, r4, #2
 80034ce:	2600      	movs	r6, #0
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	4d0b      	ldr	r5, [pc, #44]	; (8003504 <__libc_init_array+0x40>)
 80034d6:	4c0c      	ldr	r4, [pc, #48]	; (8003508 <__libc_init_array+0x44>)
 80034d8:	f000 fdc0 	bl	800405c <_init>
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	2600      	movs	r6, #0
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	08004134 	.word	0x08004134
 8003500:	08004134 	.word	0x08004134
 8003504:	08004134 	.word	0x08004134
 8003508:	08004138 	.word	0x08004138

0800350c <__retarget_lock_init_recursive>:
 800350c:	4770      	bx	lr

0800350e <__retarget_lock_acquire_recursive>:
 800350e:	4770      	bx	lr

08003510 <__retarget_lock_release_recursive>:
 8003510:	4770      	bx	lr
	...

08003514 <_free_r>:
 8003514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003516:	2900      	cmp	r1, #0
 8003518:	d044      	beq.n	80035a4 <_free_r+0x90>
 800351a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800351e:	9001      	str	r0, [sp, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f1a1 0404 	sub.w	r4, r1, #4
 8003526:	bfb8      	it	lt
 8003528:	18e4      	addlt	r4, r4, r3
 800352a:	f000 f8df 	bl	80036ec <__malloc_lock>
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <_free_r+0x94>)
 8003530:	9801      	ldr	r0, [sp, #4]
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	b933      	cbnz	r3, 8003544 <_free_r+0x30>
 8003536:	6063      	str	r3, [r4, #4]
 8003538:	6014      	str	r4, [r2, #0]
 800353a:	b003      	add	sp, #12
 800353c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003540:	f000 b8da 	b.w	80036f8 <__malloc_unlock>
 8003544:	42a3      	cmp	r3, r4
 8003546:	d908      	bls.n	800355a <_free_r+0x46>
 8003548:	6825      	ldr	r5, [r4, #0]
 800354a:	1961      	adds	r1, r4, r5
 800354c:	428b      	cmp	r3, r1
 800354e:	bf01      	itttt	eq
 8003550:	6819      	ldreq	r1, [r3, #0]
 8003552:	685b      	ldreq	r3, [r3, #4]
 8003554:	1949      	addeq	r1, r1, r5
 8003556:	6021      	streq	r1, [r4, #0]
 8003558:	e7ed      	b.n	8003536 <_free_r+0x22>
 800355a:	461a      	mov	r2, r3
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	b10b      	cbz	r3, 8003564 <_free_r+0x50>
 8003560:	42a3      	cmp	r3, r4
 8003562:	d9fa      	bls.n	800355a <_free_r+0x46>
 8003564:	6811      	ldr	r1, [r2, #0]
 8003566:	1855      	adds	r5, r2, r1
 8003568:	42a5      	cmp	r5, r4
 800356a:	d10b      	bne.n	8003584 <_free_r+0x70>
 800356c:	6824      	ldr	r4, [r4, #0]
 800356e:	4421      	add	r1, r4
 8003570:	1854      	adds	r4, r2, r1
 8003572:	42a3      	cmp	r3, r4
 8003574:	6011      	str	r1, [r2, #0]
 8003576:	d1e0      	bne.n	800353a <_free_r+0x26>
 8003578:	681c      	ldr	r4, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	6053      	str	r3, [r2, #4]
 800357e:	440c      	add	r4, r1
 8003580:	6014      	str	r4, [r2, #0]
 8003582:	e7da      	b.n	800353a <_free_r+0x26>
 8003584:	d902      	bls.n	800358c <_free_r+0x78>
 8003586:	230c      	movs	r3, #12
 8003588:	6003      	str	r3, [r0, #0]
 800358a:	e7d6      	b.n	800353a <_free_r+0x26>
 800358c:	6825      	ldr	r5, [r4, #0]
 800358e:	1961      	adds	r1, r4, r5
 8003590:	428b      	cmp	r3, r1
 8003592:	bf04      	itt	eq
 8003594:	6819      	ldreq	r1, [r3, #0]
 8003596:	685b      	ldreq	r3, [r3, #4]
 8003598:	6063      	str	r3, [r4, #4]
 800359a:	bf04      	itt	eq
 800359c:	1949      	addeq	r1, r1, r5
 800359e:	6021      	streq	r1, [r4, #0]
 80035a0:	6054      	str	r4, [r2, #4]
 80035a2:	e7ca      	b.n	800353a <_free_r+0x26>
 80035a4:	b003      	add	sp, #12
 80035a6:	bd30      	pop	{r4, r5, pc}
 80035a8:	200002b0 	.word	0x200002b0

080035ac <sbrk_aligned>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	4e0e      	ldr	r6, [pc, #56]	; (80035e8 <sbrk_aligned+0x3c>)
 80035b0:	460c      	mov	r4, r1
 80035b2:	6831      	ldr	r1, [r6, #0]
 80035b4:	4605      	mov	r5, r0
 80035b6:	b911      	cbnz	r1, 80035be <sbrk_aligned+0x12>
 80035b8:	f000 fcbc 	bl	8003f34 <_sbrk_r>
 80035bc:	6030      	str	r0, [r6, #0]
 80035be:	4621      	mov	r1, r4
 80035c0:	4628      	mov	r0, r5
 80035c2:	f000 fcb7 	bl	8003f34 <_sbrk_r>
 80035c6:	1c43      	adds	r3, r0, #1
 80035c8:	d00a      	beq.n	80035e0 <sbrk_aligned+0x34>
 80035ca:	1cc4      	adds	r4, r0, #3
 80035cc:	f024 0403 	bic.w	r4, r4, #3
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d007      	beq.n	80035e4 <sbrk_aligned+0x38>
 80035d4:	1a21      	subs	r1, r4, r0
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 fcac 	bl	8003f34 <_sbrk_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	d101      	bne.n	80035e4 <sbrk_aligned+0x38>
 80035e0:	f04f 34ff 	mov.w	r4, #4294967295
 80035e4:	4620      	mov	r0, r4
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	200002b4 	.word	0x200002b4

080035ec <_malloc_r>:
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	1ccd      	adds	r5, r1, #3
 80035f2:	f025 0503 	bic.w	r5, r5, #3
 80035f6:	3508      	adds	r5, #8
 80035f8:	2d0c      	cmp	r5, #12
 80035fa:	bf38      	it	cc
 80035fc:	250c      	movcc	r5, #12
 80035fe:	2d00      	cmp	r5, #0
 8003600:	4607      	mov	r7, r0
 8003602:	db01      	blt.n	8003608 <_malloc_r+0x1c>
 8003604:	42a9      	cmp	r1, r5
 8003606:	d905      	bls.n	8003614 <_malloc_r+0x28>
 8003608:	230c      	movs	r3, #12
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	2600      	movs	r6, #0
 800360e:	4630      	mov	r0, r6
 8003610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036e8 <_malloc_r+0xfc>
 8003618:	f000 f868 	bl	80036ec <__malloc_lock>
 800361c:	f8d8 3000 	ldr.w	r3, [r8]
 8003620:	461c      	mov	r4, r3
 8003622:	bb5c      	cbnz	r4, 800367c <_malloc_r+0x90>
 8003624:	4629      	mov	r1, r5
 8003626:	4638      	mov	r0, r7
 8003628:	f7ff ffc0 	bl	80035ac <sbrk_aligned>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	4604      	mov	r4, r0
 8003630:	d155      	bne.n	80036de <_malloc_r+0xf2>
 8003632:	f8d8 4000 	ldr.w	r4, [r8]
 8003636:	4626      	mov	r6, r4
 8003638:	2e00      	cmp	r6, #0
 800363a:	d145      	bne.n	80036c8 <_malloc_r+0xdc>
 800363c:	2c00      	cmp	r4, #0
 800363e:	d048      	beq.n	80036d2 <_malloc_r+0xe6>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	4631      	mov	r1, r6
 8003644:	4638      	mov	r0, r7
 8003646:	eb04 0903 	add.w	r9, r4, r3
 800364a:	f000 fc73 	bl	8003f34 <_sbrk_r>
 800364e:	4581      	cmp	r9, r0
 8003650:	d13f      	bne.n	80036d2 <_malloc_r+0xe6>
 8003652:	6821      	ldr	r1, [r4, #0]
 8003654:	1a6d      	subs	r5, r5, r1
 8003656:	4629      	mov	r1, r5
 8003658:	4638      	mov	r0, r7
 800365a:	f7ff ffa7 	bl	80035ac <sbrk_aligned>
 800365e:	3001      	adds	r0, #1
 8003660:	d037      	beq.n	80036d2 <_malloc_r+0xe6>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	442b      	add	r3, r5
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	f8d8 3000 	ldr.w	r3, [r8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d038      	beq.n	80036e2 <_malloc_r+0xf6>
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	42a2      	cmp	r2, r4
 8003674:	d12b      	bne.n	80036ce <_malloc_r+0xe2>
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e00f      	b.n	800369c <_malloc_r+0xb0>
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	1b52      	subs	r2, r2, r5
 8003680:	d41f      	bmi.n	80036c2 <_malloc_r+0xd6>
 8003682:	2a0b      	cmp	r2, #11
 8003684:	d917      	bls.n	80036b6 <_malloc_r+0xca>
 8003686:	1961      	adds	r1, r4, r5
 8003688:	42a3      	cmp	r3, r4
 800368a:	6025      	str	r5, [r4, #0]
 800368c:	bf18      	it	ne
 800368e:	6059      	strne	r1, [r3, #4]
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	bf08      	it	eq
 8003694:	f8c8 1000 	streq.w	r1, [r8]
 8003698:	5162      	str	r2, [r4, r5]
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	4638      	mov	r0, r7
 800369e:	f104 060b 	add.w	r6, r4, #11
 80036a2:	f000 f829 	bl	80036f8 <__malloc_unlock>
 80036a6:	f026 0607 	bic.w	r6, r6, #7
 80036aa:	1d23      	adds	r3, r4, #4
 80036ac:	1af2      	subs	r2, r6, r3
 80036ae:	d0ae      	beq.n	800360e <_malloc_r+0x22>
 80036b0:	1b9b      	subs	r3, r3, r6
 80036b2:	50a3      	str	r3, [r4, r2]
 80036b4:	e7ab      	b.n	800360e <_malloc_r+0x22>
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	6862      	ldr	r2, [r4, #4]
 80036ba:	d1dd      	bne.n	8003678 <_malloc_r+0x8c>
 80036bc:	f8c8 2000 	str.w	r2, [r8]
 80036c0:	e7ec      	b.n	800369c <_malloc_r+0xb0>
 80036c2:	4623      	mov	r3, r4
 80036c4:	6864      	ldr	r4, [r4, #4]
 80036c6:	e7ac      	b.n	8003622 <_malloc_r+0x36>
 80036c8:	4634      	mov	r4, r6
 80036ca:	6876      	ldr	r6, [r6, #4]
 80036cc:	e7b4      	b.n	8003638 <_malloc_r+0x4c>
 80036ce:	4613      	mov	r3, r2
 80036d0:	e7cc      	b.n	800366c <_malloc_r+0x80>
 80036d2:	230c      	movs	r3, #12
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4638      	mov	r0, r7
 80036d8:	f000 f80e 	bl	80036f8 <__malloc_unlock>
 80036dc:	e797      	b.n	800360e <_malloc_r+0x22>
 80036de:	6025      	str	r5, [r4, #0]
 80036e0:	e7dc      	b.n	800369c <_malloc_r+0xb0>
 80036e2:	605b      	str	r3, [r3, #4]
 80036e4:	deff      	udf	#255	; 0xff
 80036e6:	bf00      	nop
 80036e8:	200002b0 	.word	0x200002b0

080036ec <__malloc_lock>:
 80036ec:	4801      	ldr	r0, [pc, #4]	; (80036f4 <__malloc_lock+0x8>)
 80036ee:	f7ff bf0e 	b.w	800350e <__retarget_lock_acquire_recursive>
 80036f2:	bf00      	nop
 80036f4:	200002ac 	.word	0x200002ac

080036f8 <__malloc_unlock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	; (8003700 <__malloc_unlock+0x8>)
 80036fa:	f7ff bf09 	b.w	8003510 <__retarget_lock_release_recursive>
 80036fe:	bf00      	nop
 8003700:	200002ac 	.word	0x200002ac

08003704 <__sfputc_r>:
 8003704:	6893      	ldr	r3, [r2, #8]
 8003706:	3b01      	subs	r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	b410      	push	{r4}
 800370c:	6093      	str	r3, [r2, #8]
 800370e:	da08      	bge.n	8003722 <__sfputc_r+0x1e>
 8003710:	6994      	ldr	r4, [r2, #24]
 8003712:	42a3      	cmp	r3, r4
 8003714:	db01      	blt.n	800371a <__sfputc_r+0x16>
 8003716:	290a      	cmp	r1, #10
 8003718:	d103      	bne.n	8003722 <__sfputc_r+0x1e>
 800371a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800371e:	f000 bb73 	b.w	8003e08 <__swbuf_r>
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	1c58      	adds	r0, r3, #1
 8003726:	6010      	str	r0, [r2, #0]
 8003728:	7019      	strb	r1, [r3, #0]
 800372a:	4608      	mov	r0, r1
 800372c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003730:	4770      	bx	lr

08003732 <__sfputs_r>:
 8003732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003734:	4606      	mov	r6, r0
 8003736:	460f      	mov	r7, r1
 8003738:	4614      	mov	r4, r2
 800373a:	18d5      	adds	r5, r2, r3
 800373c:	42ac      	cmp	r4, r5
 800373e:	d101      	bne.n	8003744 <__sfputs_r+0x12>
 8003740:	2000      	movs	r0, #0
 8003742:	e007      	b.n	8003754 <__sfputs_r+0x22>
 8003744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003748:	463a      	mov	r2, r7
 800374a:	4630      	mov	r0, r6
 800374c:	f7ff ffda 	bl	8003704 <__sfputc_r>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d1f3      	bne.n	800373c <__sfputs_r+0xa>
 8003754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003758 <_vfiprintf_r>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	460d      	mov	r5, r1
 800375e:	b09d      	sub	sp, #116	; 0x74
 8003760:	4614      	mov	r4, r2
 8003762:	4698      	mov	r8, r3
 8003764:	4606      	mov	r6, r0
 8003766:	b118      	cbz	r0, 8003770 <_vfiprintf_r+0x18>
 8003768:	6a03      	ldr	r3, [r0, #32]
 800376a:	b90b      	cbnz	r3, 8003770 <_vfiprintf_r+0x18>
 800376c:	f7ff fdca 	bl	8003304 <__sinit>
 8003770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003772:	07d9      	lsls	r1, r3, #31
 8003774:	d405      	bmi.n	8003782 <_vfiprintf_r+0x2a>
 8003776:	89ab      	ldrh	r3, [r5, #12]
 8003778:	059a      	lsls	r2, r3, #22
 800377a:	d402      	bmi.n	8003782 <_vfiprintf_r+0x2a>
 800377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377e:	f7ff fec6 	bl	800350e <__retarget_lock_acquire_recursive>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	071b      	lsls	r3, r3, #28
 8003786:	d501      	bpl.n	800378c <_vfiprintf_r+0x34>
 8003788:	692b      	ldr	r3, [r5, #16]
 800378a:	b99b      	cbnz	r3, 80037b4 <_vfiprintf_r+0x5c>
 800378c:	4629      	mov	r1, r5
 800378e:	4630      	mov	r0, r6
 8003790:	f000 fb78 	bl	8003e84 <__swsetup_r>
 8003794:	b170      	cbz	r0, 80037b4 <_vfiprintf_r+0x5c>
 8003796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003798:	07dc      	lsls	r4, r3, #31
 800379a:	d504      	bpl.n	80037a6 <_vfiprintf_r+0x4e>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	b01d      	add	sp, #116	; 0x74
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	89ab      	ldrh	r3, [r5, #12]
 80037a8:	0598      	lsls	r0, r3, #22
 80037aa:	d4f7      	bmi.n	800379c <_vfiprintf_r+0x44>
 80037ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ae:	f7ff feaf 	bl	8003510 <__retarget_lock_release_recursive>
 80037b2:	e7f3      	b.n	800379c <_vfiprintf_r+0x44>
 80037b4:	2300      	movs	r3, #0
 80037b6:	9309      	str	r3, [sp, #36]	; 0x24
 80037b8:	2320      	movs	r3, #32
 80037ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037be:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c2:	2330      	movs	r3, #48	; 0x30
 80037c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003978 <_vfiprintf_r+0x220>
 80037c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037cc:	f04f 0901 	mov.w	r9, #1
 80037d0:	4623      	mov	r3, r4
 80037d2:	469a      	mov	sl, r3
 80037d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d8:	b10a      	cbz	r2, 80037de <_vfiprintf_r+0x86>
 80037da:	2a25      	cmp	r2, #37	; 0x25
 80037dc:	d1f9      	bne.n	80037d2 <_vfiprintf_r+0x7a>
 80037de:	ebba 0b04 	subs.w	fp, sl, r4
 80037e2:	d00b      	beq.n	80037fc <_vfiprintf_r+0xa4>
 80037e4:	465b      	mov	r3, fp
 80037e6:	4622      	mov	r2, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7ff ffa1 	bl	8003732 <__sfputs_r>
 80037f0:	3001      	adds	r0, #1
 80037f2:	f000 80a9 	beq.w	8003948 <_vfiprintf_r+0x1f0>
 80037f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037f8:	445a      	add	r2, fp
 80037fa:	9209      	str	r2, [sp, #36]	; 0x24
 80037fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a1 	beq.w	8003948 <_vfiprintf_r+0x1f0>
 8003806:	2300      	movs	r3, #0
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003810:	f10a 0a01 	add.w	sl, sl, #1
 8003814:	9304      	str	r3, [sp, #16]
 8003816:	9307      	str	r3, [sp, #28]
 8003818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800381c:	931a      	str	r3, [sp, #104]	; 0x68
 800381e:	4654      	mov	r4, sl
 8003820:	2205      	movs	r2, #5
 8003822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003826:	4854      	ldr	r0, [pc, #336]	; (8003978 <_vfiprintf_r+0x220>)
 8003828:	f7fc fcd2 	bl	80001d0 <memchr>
 800382c:	9a04      	ldr	r2, [sp, #16]
 800382e:	b9d8      	cbnz	r0, 8003868 <_vfiprintf_r+0x110>
 8003830:	06d1      	lsls	r1, r2, #27
 8003832:	bf44      	itt	mi
 8003834:	2320      	movmi	r3, #32
 8003836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800383a:	0713      	lsls	r3, r2, #28
 800383c:	bf44      	itt	mi
 800383e:	232b      	movmi	r3, #43	; 0x2b
 8003840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003844:	f89a 3000 	ldrb.w	r3, [sl]
 8003848:	2b2a      	cmp	r3, #42	; 0x2a
 800384a:	d015      	beq.n	8003878 <_vfiprintf_r+0x120>
 800384c:	9a07      	ldr	r2, [sp, #28]
 800384e:	4654      	mov	r4, sl
 8003850:	2000      	movs	r0, #0
 8003852:	f04f 0c0a 	mov.w	ip, #10
 8003856:	4621      	mov	r1, r4
 8003858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800385c:	3b30      	subs	r3, #48	; 0x30
 800385e:	2b09      	cmp	r3, #9
 8003860:	d94d      	bls.n	80038fe <_vfiprintf_r+0x1a6>
 8003862:	b1b0      	cbz	r0, 8003892 <_vfiprintf_r+0x13a>
 8003864:	9207      	str	r2, [sp, #28]
 8003866:	e014      	b.n	8003892 <_vfiprintf_r+0x13a>
 8003868:	eba0 0308 	sub.w	r3, r0, r8
 800386c:	fa09 f303 	lsl.w	r3, r9, r3
 8003870:	4313      	orrs	r3, r2
 8003872:	9304      	str	r3, [sp, #16]
 8003874:	46a2      	mov	sl, r4
 8003876:	e7d2      	b.n	800381e <_vfiprintf_r+0xc6>
 8003878:	9b03      	ldr	r3, [sp, #12]
 800387a:	1d19      	adds	r1, r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	9103      	str	r1, [sp, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	bfbb      	ittet	lt
 8003884:	425b      	neglt	r3, r3
 8003886:	f042 0202 	orrlt.w	r2, r2, #2
 800388a:	9307      	strge	r3, [sp, #28]
 800388c:	9307      	strlt	r3, [sp, #28]
 800388e:	bfb8      	it	lt
 8003890:	9204      	strlt	r2, [sp, #16]
 8003892:	7823      	ldrb	r3, [r4, #0]
 8003894:	2b2e      	cmp	r3, #46	; 0x2e
 8003896:	d10c      	bne.n	80038b2 <_vfiprintf_r+0x15a>
 8003898:	7863      	ldrb	r3, [r4, #1]
 800389a:	2b2a      	cmp	r3, #42	; 0x2a
 800389c:	d134      	bne.n	8003908 <_vfiprintf_r+0x1b0>
 800389e:	9b03      	ldr	r3, [sp, #12]
 80038a0:	1d1a      	adds	r2, r3, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	9203      	str	r2, [sp, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bfb8      	it	lt
 80038aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80038ae:	3402      	adds	r4, #2
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003988 <_vfiprintf_r+0x230>
 80038b6:	7821      	ldrb	r1, [r4, #0]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4650      	mov	r0, sl
 80038bc:	f7fc fc88 	bl	80001d0 <memchr>
 80038c0:	b138      	cbz	r0, 80038d2 <_vfiprintf_r+0x17a>
 80038c2:	9b04      	ldr	r3, [sp, #16]
 80038c4:	eba0 000a 	sub.w	r0, r0, sl
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	4082      	lsls	r2, r0
 80038cc:	4313      	orrs	r3, r2
 80038ce:	3401      	adds	r4, #1
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d6:	4829      	ldr	r0, [pc, #164]	; (800397c <_vfiprintf_r+0x224>)
 80038d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038dc:	2206      	movs	r2, #6
 80038de:	f7fc fc77 	bl	80001d0 <memchr>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d03f      	beq.n	8003966 <_vfiprintf_r+0x20e>
 80038e6:	4b26      	ldr	r3, [pc, #152]	; (8003980 <_vfiprintf_r+0x228>)
 80038e8:	bb1b      	cbnz	r3, 8003932 <_vfiprintf_r+0x1da>
 80038ea:	9b03      	ldr	r3, [sp, #12]
 80038ec:	3307      	adds	r3, #7
 80038ee:	f023 0307 	bic.w	r3, r3, #7
 80038f2:	3308      	adds	r3, #8
 80038f4:	9303      	str	r3, [sp, #12]
 80038f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f8:	443b      	add	r3, r7
 80038fa:	9309      	str	r3, [sp, #36]	; 0x24
 80038fc:	e768      	b.n	80037d0 <_vfiprintf_r+0x78>
 80038fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003902:	460c      	mov	r4, r1
 8003904:	2001      	movs	r0, #1
 8003906:	e7a6      	b.n	8003856 <_vfiprintf_r+0xfe>
 8003908:	2300      	movs	r3, #0
 800390a:	3401      	adds	r4, #1
 800390c:	9305      	str	r3, [sp, #20]
 800390e:	4619      	mov	r1, r3
 8003910:	f04f 0c0a 	mov.w	ip, #10
 8003914:	4620      	mov	r0, r4
 8003916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800391a:	3a30      	subs	r2, #48	; 0x30
 800391c:	2a09      	cmp	r2, #9
 800391e:	d903      	bls.n	8003928 <_vfiprintf_r+0x1d0>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0c6      	beq.n	80038b2 <_vfiprintf_r+0x15a>
 8003924:	9105      	str	r1, [sp, #20]
 8003926:	e7c4      	b.n	80038b2 <_vfiprintf_r+0x15a>
 8003928:	fb0c 2101 	mla	r1, ip, r1, r2
 800392c:	4604      	mov	r4, r0
 800392e:	2301      	movs	r3, #1
 8003930:	e7f0      	b.n	8003914 <_vfiprintf_r+0x1bc>
 8003932:	ab03      	add	r3, sp, #12
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	462a      	mov	r2, r5
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <_vfiprintf_r+0x22c>)
 800393a:	a904      	add	r1, sp, #16
 800393c:	4630      	mov	r0, r6
 800393e:	f3af 8000 	nop.w
 8003942:	4607      	mov	r7, r0
 8003944:	1c78      	adds	r0, r7, #1
 8003946:	d1d6      	bne.n	80038f6 <_vfiprintf_r+0x19e>
 8003948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394a:	07d9      	lsls	r1, r3, #31
 800394c:	d405      	bmi.n	800395a <_vfiprintf_r+0x202>
 800394e:	89ab      	ldrh	r3, [r5, #12]
 8003950:	059a      	lsls	r2, r3, #22
 8003952:	d402      	bmi.n	800395a <_vfiprintf_r+0x202>
 8003954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003956:	f7ff fddb 	bl	8003510 <__retarget_lock_release_recursive>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	065b      	lsls	r3, r3, #25
 800395e:	f53f af1d 	bmi.w	800379c <_vfiprintf_r+0x44>
 8003962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003964:	e71c      	b.n	80037a0 <_vfiprintf_r+0x48>
 8003966:	ab03      	add	r3, sp, #12
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	462a      	mov	r2, r5
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <_vfiprintf_r+0x22c>)
 800396e:	a904      	add	r1, sp, #16
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f879 	bl	8003a68 <_printf_i>
 8003976:	e7e4      	b.n	8003942 <_vfiprintf_r+0x1ea>
 8003978:	08004100 	.word	0x08004100
 800397c:	0800410a 	.word	0x0800410a
 8003980:	00000000 	.word	0x00000000
 8003984:	08003733 	.word	0x08003733
 8003988:	08004106 	.word	0x08004106

0800398c <_printf_common>:
 800398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003990:	4616      	mov	r6, r2
 8003992:	4699      	mov	r9, r3
 8003994:	688a      	ldr	r2, [r1, #8]
 8003996:	690b      	ldr	r3, [r1, #16]
 8003998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800399c:	4293      	cmp	r3, r2
 800399e:	bfb8      	it	lt
 80039a0:	4613      	movlt	r3, r2
 80039a2:	6033      	str	r3, [r6, #0]
 80039a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a8:	4607      	mov	r7, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	b10a      	cbz	r2, 80039b2 <_printf_common+0x26>
 80039ae:	3301      	adds	r3, #1
 80039b0:	6033      	str	r3, [r6, #0]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	0699      	lsls	r1, r3, #26
 80039b6:	bf42      	ittt	mi
 80039b8:	6833      	ldrmi	r3, [r6, #0]
 80039ba:	3302      	addmi	r3, #2
 80039bc:	6033      	strmi	r3, [r6, #0]
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	f015 0506 	ands.w	r5, r5, #6
 80039c4:	d106      	bne.n	80039d4 <_printf_common+0x48>
 80039c6:	f104 0a19 	add.w	sl, r4, #25
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	6832      	ldr	r2, [r6, #0]
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	42ab      	cmp	r3, r5
 80039d2:	dc26      	bgt.n	8003a22 <_printf_common+0x96>
 80039d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039d8:	1e13      	subs	r3, r2, #0
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	bf18      	it	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	0692      	lsls	r2, r2, #26
 80039e2:	d42b      	bmi.n	8003a3c <_printf_common+0xb0>
 80039e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039e8:	4649      	mov	r1, r9
 80039ea:	4638      	mov	r0, r7
 80039ec:	47c0      	blx	r8
 80039ee:	3001      	adds	r0, #1
 80039f0:	d01e      	beq.n	8003a30 <_printf_common+0xa4>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	6922      	ldr	r2, [r4, #16]
 80039f6:	f003 0306 	and.w	r3, r3, #6
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf02      	ittt	eq
 80039fe:	68e5      	ldreq	r5, [r4, #12]
 8003a00:	6833      	ldreq	r3, [r6, #0]
 8003a02:	1aed      	subeq	r5, r5, r3
 8003a04:	68a3      	ldr	r3, [r4, #8]
 8003a06:	bf0c      	ite	eq
 8003a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a0c:	2500      	movne	r5, #0
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bfc4      	itt	gt
 8003a12:	1a9b      	subgt	r3, r3, r2
 8003a14:	18ed      	addgt	r5, r5, r3
 8003a16:	2600      	movs	r6, #0
 8003a18:	341a      	adds	r4, #26
 8003a1a:	42b5      	cmp	r5, r6
 8003a1c:	d11a      	bne.n	8003a54 <_printf_common+0xc8>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e008      	b.n	8003a34 <_printf_common+0xa8>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4652      	mov	r2, sl
 8003a26:	4649      	mov	r1, r9
 8003a28:	4638      	mov	r0, r7
 8003a2a:	47c0      	blx	r8
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d103      	bne.n	8003a38 <_printf_common+0xac>
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a38:	3501      	adds	r5, #1
 8003a3a:	e7c6      	b.n	80039ca <_printf_common+0x3e>
 8003a3c:	18e1      	adds	r1, r4, r3
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	2030      	movs	r0, #48	; 0x30
 8003a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a46:	4422      	add	r2, r4
 8003a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a50:	3302      	adds	r3, #2
 8003a52:	e7c7      	b.n	80039e4 <_printf_common+0x58>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4622      	mov	r2, r4
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c0      	blx	r8
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d0e6      	beq.n	8003a30 <_printf_common+0xa4>
 8003a62:	3601      	adds	r6, #1
 8003a64:	e7d9      	b.n	8003a1a <_printf_common+0x8e>
	...

08003a68 <_printf_i>:
 8003a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	7e0f      	ldrb	r7, [r1, #24]
 8003a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a70:	2f78      	cmp	r7, #120	; 0x78
 8003a72:	4691      	mov	r9, r2
 8003a74:	4680      	mov	r8, r0
 8003a76:	460c      	mov	r4, r1
 8003a78:	469a      	mov	sl, r3
 8003a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a7e:	d807      	bhi.n	8003a90 <_printf_i+0x28>
 8003a80:	2f62      	cmp	r7, #98	; 0x62
 8003a82:	d80a      	bhi.n	8003a9a <_printf_i+0x32>
 8003a84:	2f00      	cmp	r7, #0
 8003a86:	f000 80d4 	beq.w	8003c32 <_printf_i+0x1ca>
 8003a8a:	2f58      	cmp	r7, #88	; 0x58
 8003a8c:	f000 80c0 	beq.w	8003c10 <_printf_i+0x1a8>
 8003a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a98:	e03a      	b.n	8003b10 <_printf_i+0xa8>
 8003a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a9e:	2b15      	cmp	r3, #21
 8003aa0:	d8f6      	bhi.n	8003a90 <_printf_i+0x28>
 8003aa2:	a101      	add	r1, pc, #4	; (adr r1, 8003aa8 <_printf_i+0x40>)
 8003aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003b15 	.word	0x08003b15
 8003ab0:	08003a91 	.word	0x08003a91
 8003ab4:	08003a91 	.word	0x08003a91
 8003ab8:	08003a91 	.word	0x08003a91
 8003abc:	08003a91 	.word	0x08003a91
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003a91 	.word	0x08003a91
 8003ac8:	08003a91 	.word	0x08003a91
 8003acc:	08003a91 	.word	0x08003a91
 8003ad0:	08003a91 	.word	0x08003a91
 8003ad4:	08003c19 	.word	0x08003c19
 8003ad8:	08003b41 	.word	0x08003b41
 8003adc:	08003bd3 	.word	0x08003bd3
 8003ae0:	08003a91 	.word	0x08003a91
 8003ae4:	08003a91 	.word	0x08003a91
 8003ae8:	08003c3b 	.word	0x08003c3b
 8003aec:	08003a91 	.word	0x08003a91
 8003af0:	08003b41 	.word	0x08003b41
 8003af4:	08003a91 	.word	0x08003a91
 8003af8:	08003a91 	.word	0x08003a91
 8003afc:	08003bdb 	.word	0x08003bdb
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	602a      	str	r2, [r5, #0]
 8003b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b10:	2301      	movs	r3, #1
 8003b12:	e09f      	b.n	8003c54 <_printf_i+0x1ec>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	682b      	ldr	r3, [r5, #0]
 8003b18:	0607      	lsls	r7, r0, #24
 8003b1a:	f103 0104 	add.w	r1, r3, #4
 8003b1e:	6029      	str	r1, [r5, #0]
 8003b20:	d501      	bpl.n	8003b26 <_printf_i+0xbe>
 8003b22:	681e      	ldr	r6, [r3, #0]
 8003b24:	e003      	b.n	8003b2e <_printf_i+0xc6>
 8003b26:	0646      	lsls	r6, r0, #25
 8003b28:	d5fb      	bpl.n	8003b22 <_printf_i+0xba>
 8003b2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b2e:	2e00      	cmp	r6, #0
 8003b30:	da03      	bge.n	8003b3a <_printf_i+0xd2>
 8003b32:	232d      	movs	r3, #45	; 0x2d
 8003b34:	4276      	negs	r6, r6
 8003b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b3a:	485a      	ldr	r0, [pc, #360]	; (8003ca4 <_printf_i+0x23c>)
 8003b3c:	230a      	movs	r3, #10
 8003b3e:	e012      	b.n	8003b66 <_printf_i+0xfe>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	6820      	ldr	r0, [r4, #0]
 8003b44:	1d19      	adds	r1, r3, #4
 8003b46:	6029      	str	r1, [r5, #0]
 8003b48:	0605      	lsls	r5, r0, #24
 8003b4a:	d501      	bpl.n	8003b50 <_printf_i+0xe8>
 8003b4c:	681e      	ldr	r6, [r3, #0]
 8003b4e:	e002      	b.n	8003b56 <_printf_i+0xee>
 8003b50:	0641      	lsls	r1, r0, #25
 8003b52:	d5fb      	bpl.n	8003b4c <_printf_i+0xe4>
 8003b54:	881e      	ldrh	r6, [r3, #0]
 8003b56:	4853      	ldr	r0, [pc, #332]	; (8003ca4 <_printf_i+0x23c>)
 8003b58:	2f6f      	cmp	r7, #111	; 0x6f
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2308      	moveq	r3, #8
 8003b5e:	230a      	movne	r3, #10
 8003b60:	2100      	movs	r1, #0
 8003b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b66:	6865      	ldr	r5, [r4, #4]
 8003b68:	60a5      	str	r5, [r4, #8]
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	bfa2      	ittt	ge
 8003b6e:	6821      	ldrge	r1, [r4, #0]
 8003b70:	f021 0104 	bicge.w	r1, r1, #4
 8003b74:	6021      	strge	r1, [r4, #0]
 8003b76:	b90e      	cbnz	r6, 8003b7c <_printf_i+0x114>
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	d04b      	beq.n	8003c14 <_printf_i+0x1ac>
 8003b7c:	4615      	mov	r5, r2
 8003b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b82:	fb03 6711 	mls	r7, r3, r1, r6
 8003b86:	5dc7      	ldrb	r7, [r0, r7]
 8003b88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b8c:	4637      	mov	r7, r6
 8003b8e:	42bb      	cmp	r3, r7
 8003b90:	460e      	mov	r6, r1
 8003b92:	d9f4      	bls.n	8003b7e <_printf_i+0x116>
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d10b      	bne.n	8003bb0 <_printf_i+0x148>
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	07de      	lsls	r6, r3, #31
 8003b9c:	d508      	bpl.n	8003bb0 <_printf_i+0x148>
 8003b9e:	6923      	ldr	r3, [r4, #16]
 8003ba0:	6861      	ldr	r1, [r4, #4]
 8003ba2:	4299      	cmp	r1, r3
 8003ba4:	bfde      	ittt	le
 8003ba6:	2330      	movle	r3, #48	; 0x30
 8003ba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bb0:	1b52      	subs	r2, r2, r5
 8003bb2:	6122      	str	r2, [r4, #16]
 8003bb4:	f8cd a000 	str.w	sl, [sp]
 8003bb8:	464b      	mov	r3, r9
 8003bba:	aa03      	add	r2, sp, #12
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f7ff fee4 	bl	800398c <_printf_common>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d14a      	bne.n	8003c5e <_printf_i+0x1f6>
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	b004      	add	sp, #16
 8003bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f043 0320 	orr.w	r3, r3, #32
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	4833      	ldr	r0, [pc, #204]	; (8003ca8 <_printf_i+0x240>)
 8003bdc:	2778      	movs	r7, #120	; 0x78
 8003bde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	6829      	ldr	r1, [r5, #0]
 8003be6:	061f      	lsls	r7, r3, #24
 8003be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bec:	d402      	bmi.n	8003bf4 <_printf_i+0x18c>
 8003bee:	065f      	lsls	r7, r3, #25
 8003bf0:	bf48      	it	mi
 8003bf2:	b2b6      	uxthmi	r6, r6
 8003bf4:	07df      	lsls	r7, r3, #31
 8003bf6:	bf48      	it	mi
 8003bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bfc:	6029      	str	r1, [r5, #0]
 8003bfe:	bf48      	it	mi
 8003c00:	6023      	strmi	r3, [r4, #0]
 8003c02:	b91e      	cbnz	r6, 8003c0c <_printf_i+0x1a4>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	e7a7      	b.n	8003b60 <_printf_i+0xf8>
 8003c10:	4824      	ldr	r0, [pc, #144]	; (8003ca4 <_printf_i+0x23c>)
 8003c12:	e7e4      	b.n	8003bde <_printf_i+0x176>
 8003c14:	4615      	mov	r5, r2
 8003c16:	e7bd      	b.n	8003b94 <_printf_i+0x12c>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	6826      	ldr	r6, [r4, #0]
 8003c1c:	6961      	ldr	r1, [r4, #20]
 8003c1e:	1d18      	adds	r0, r3, #4
 8003c20:	6028      	str	r0, [r5, #0]
 8003c22:	0635      	lsls	r5, r6, #24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	d501      	bpl.n	8003c2c <_printf_i+0x1c4>
 8003c28:	6019      	str	r1, [r3, #0]
 8003c2a:	e002      	b.n	8003c32 <_printf_i+0x1ca>
 8003c2c:	0670      	lsls	r0, r6, #25
 8003c2e:	d5fb      	bpl.n	8003c28 <_printf_i+0x1c0>
 8003c30:	8019      	strh	r1, [r3, #0]
 8003c32:	2300      	movs	r3, #0
 8003c34:	6123      	str	r3, [r4, #16]
 8003c36:	4615      	mov	r5, r2
 8003c38:	e7bc      	b.n	8003bb4 <_printf_i+0x14c>
 8003c3a:	682b      	ldr	r3, [r5, #0]
 8003c3c:	1d1a      	adds	r2, r3, #4
 8003c3e:	602a      	str	r2, [r5, #0]
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	6862      	ldr	r2, [r4, #4]
 8003c44:	2100      	movs	r1, #0
 8003c46:	4628      	mov	r0, r5
 8003c48:	f7fc fac2 	bl	80001d0 <memchr>
 8003c4c:	b108      	cbz	r0, 8003c52 <_printf_i+0x1ea>
 8003c4e:	1b40      	subs	r0, r0, r5
 8003c50:	6060      	str	r0, [r4, #4]
 8003c52:	6863      	ldr	r3, [r4, #4]
 8003c54:	6123      	str	r3, [r4, #16]
 8003c56:	2300      	movs	r3, #0
 8003c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5c:	e7aa      	b.n	8003bb4 <_printf_i+0x14c>
 8003c5e:	6923      	ldr	r3, [r4, #16]
 8003c60:	462a      	mov	r2, r5
 8003c62:	4649      	mov	r1, r9
 8003c64:	4640      	mov	r0, r8
 8003c66:	47d0      	blx	sl
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d0ad      	beq.n	8003bc8 <_printf_i+0x160>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	079b      	lsls	r3, r3, #30
 8003c70:	d413      	bmi.n	8003c9a <_printf_i+0x232>
 8003c72:	68e0      	ldr	r0, [r4, #12]
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	4298      	cmp	r0, r3
 8003c78:	bfb8      	it	lt
 8003c7a:	4618      	movlt	r0, r3
 8003c7c:	e7a6      	b.n	8003bcc <_printf_i+0x164>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4632      	mov	r2, r6
 8003c82:	4649      	mov	r1, r9
 8003c84:	4640      	mov	r0, r8
 8003c86:	47d0      	blx	sl
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d09d      	beq.n	8003bc8 <_printf_i+0x160>
 8003c8c:	3501      	adds	r5, #1
 8003c8e:	68e3      	ldr	r3, [r4, #12]
 8003c90:	9903      	ldr	r1, [sp, #12]
 8003c92:	1a5b      	subs	r3, r3, r1
 8003c94:	42ab      	cmp	r3, r5
 8003c96:	dcf2      	bgt.n	8003c7e <_printf_i+0x216>
 8003c98:	e7eb      	b.n	8003c72 <_printf_i+0x20a>
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	f104 0619 	add.w	r6, r4, #25
 8003ca0:	e7f5      	b.n	8003c8e <_printf_i+0x226>
 8003ca2:	bf00      	nop
 8003ca4:	08004111 	.word	0x08004111
 8003ca8:	08004122 	.word	0x08004122

08003cac <__sflush_r>:
 8003cac:	898a      	ldrh	r2, [r1, #12]
 8003cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	0710      	lsls	r0, r2, #28
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	d458      	bmi.n	8003d6c <__sflush_r+0xc0>
 8003cba:	684b      	ldr	r3, [r1, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	dc05      	bgt.n	8003ccc <__sflush_r+0x20>
 8003cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dc02      	bgt.n	8003ccc <__sflush_r+0x20>
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	d0f9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cd8:	682f      	ldr	r7, [r5, #0]
 8003cda:	6a21      	ldr	r1, [r4, #32]
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	d032      	beq.n	8003d46 <__sflush_r+0x9a>
 8003ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	075a      	lsls	r2, r3, #29
 8003ce6:	d505      	bpl.n	8003cf4 <__sflush_r+0x48>
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	1ac0      	subs	r0, r0, r3
 8003cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cee:	b10b      	cbz	r3, 8003cf4 <__sflush_r+0x48>
 8003cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cf2:	1ac0      	subs	r0, r0, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cfa:	6a21      	ldr	r1, [r4, #32]
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b0      	blx	r6
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	d106      	bne.n	8003d14 <__sflush_r+0x68>
 8003d06:	6829      	ldr	r1, [r5, #0]
 8003d08:	291d      	cmp	r1, #29
 8003d0a:	d82b      	bhi.n	8003d64 <__sflush_r+0xb8>
 8003d0c:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <__sflush_r+0x108>)
 8003d0e:	410a      	asrs	r2, r1
 8003d10:	07d6      	lsls	r6, r2, #31
 8003d12:	d427      	bmi.n	8003d64 <__sflush_r+0xb8>
 8003d14:	2200      	movs	r2, #0
 8003d16:	6062      	str	r2, [r4, #4]
 8003d18:	04d9      	lsls	r1, r3, #19
 8003d1a:	6922      	ldr	r2, [r4, #16]
 8003d1c:	6022      	str	r2, [r4, #0]
 8003d1e:	d504      	bpl.n	8003d2a <__sflush_r+0x7e>
 8003d20:	1c42      	adds	r2, r0, #1
 8003d22:	d101      	bne.n	8003d28 <__sflush_r+0x7c>
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	b903      	cbnz	r3, 8003d2a <__sflush_r+0x7e>
 8003d28:	6560      	str	r0, [r4, #84]	; 0x54
 8003d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d2c:	602f      	str	r7, [r5, #0]
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d0c9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003d32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d36:	4299      	cmp	r1, r3
 8003d38:	d002      	beq.n	8003d40 <__sflush_r+0x94>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7ff fbea 	bl	8003514 <_free_r>
 8003d40:	2000      	movs	r0, #0
 8003d42:	6360      	str	r0, [r4, #52]	; 0x34
 8003d44:	e7c0      	b.n	8003cc8 <__sflush_r+0x1c>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	1c41      	adds	r1, r0, #1
 8003d4e:	d1c8      	bne.n	8003ce2 <__sflush_r+0x36>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c5      	beq.n	8003ce2 <__sflush_r+0x36>
 8003d56:	2b1d      	cmp	r3, #29
 8003d58:	d001      	beq.n	8003d5e <__sflush_r+0xb2>
 8003d5a:	2b16      	cmp	r3, #22
 8003d5c:	d101      	bne.n	8003d62 <__sflush_r+0xb6>
 8003d5e:	602f      	str	r7, [r5, #0]
 8003d60:	e7b1      	b.n	8003cc6 <__sflush_r+0x1a>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	e7ad      	b.n	8003cc8 <__sflush_r+0x1c>
 8003d6c:	690f      	ldr	r7, [r1, #16]
 8003d6e:	2f00      	cmp	r7, #0
 8003d70:	d0a9      	beq.n	8003cc6 <__sflush_r+0x1a>
 8003d72:	0793      	lsls	r3, r2, #30
 8003d74:	680e      	ldr	r6, [r1, #0]
 8003d76:	bf08      	it	eq
 8003d78:	694b      	ldreq	r3, [r1, #20]
 8003d7a:	600f      	str	r7, [r1, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	2300      	movne	r3, #0
 8003d80:	eba6 0807 	sub.w	r8, r6, r7
 8003d84:	608b      	str	r3, [r1, #8]
 8003d86:	f1b8 0f00 	cmp.w	r8, #0
 8003d8a:	dd9c      	ble.n	8003cc6 <__sflush_r+0x1a>
 8003d8c:	6a21      	ldr	r1, [r4, #32]
 8003d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d90:	4643      	mov	r3, r8
 8003d92:	463a      	mov	r2, r7
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b0      	blx	r6
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dc06      	bgt.n	8003daa <__sflush_r+0xfe>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e78e      	b.n	8003cc8 <__sflush_r+0x1c>
 8003daa:	4407      	add	r7, r0
 8003dac:	eba8 0800 	sub.w	r8, r8, r0
 8003db0:	e7e9      	b.n	8003d86 <__sflush_r+0xda>
 8003db2:	bf00      	nop
 8003db4:	dfbffffe 	.word	0xdfbffffe

08003db8 <_fflush_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	690b      	ldr	r3, [r1, #16]
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	b913      	cbnz	r3, 8003dc8 <_fflush_r+0x10>
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	b118      	cbz	r0, 8003dd2 <_fflush_r+0x1a>
 8003dca:	6a03      	ldr	r3, [r0, #32]
 8003dcc:	b90b      	cbnz	r3, 8003dd2 <_fflush_r+0x1a>
 8003dce:	f7ff fa99 	bl	8003304 <__sinit>
 8003dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f3      	beq.n	8003dc2 <_fflush_r+0xa>
 8003dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ddc:	07d0      	lsls	r0, r2, #31
 8003dde:	d404      	bmi.n	8003dea <_fflush_r+0x32>
 8003de0:	0599      	lsls	r1, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_fflush_r+0x32>
 8003de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de6:	f7ff fb92 	bl	800350e <__retarget_lock_acquire_recursive>
 8003dea:	4628      	mov	r0, r5
 8003dec:	4621      	mov	r1, r4
 8003dee:	f7ff ff5d 	bl	8003cac <__sflush_r>
 8003df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003df4:	07da      	lsls	r2, r3, #31
 8003df6:	4605      	mov	r5, r0
 8003df8:	d4e4      	bmi.n	8003dc4 <_fflush_r+0xc>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	059b      	lsls	r3, r3, #22
 8003dfe:	d4e1      	bmi.n	8003dc4 <_fflush_r+0xc>
 8003e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e02:	f7ff fb85 	bl	8003510 <__retarget_lock_release_recursive>
 8003e06:	e7dd      	b.n	8003dc4 <_fflush_r+0xc>

08003e08 <__swbuf_r>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	460e      	mov	r6, r1
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	4605      	mov	r5, r0
 8003e10:	b118      	cbz	r0, 8003e1a <__swbuf_r+0x12>
 8003e12:	6a03      	ldr	r3, [r0, #32]
 8003e14:	b90b      	cbnz	r3, 8003e1a <__swbuf_r+0x12>
 8003e16:	f7ff fa75 	bl	8003304 <__sinit>
 8003e1a:	69a3      	ldr	r3, [r4, #24]
 8003e1c:	60a3      	str	r3, [r4, #8]
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	071a      	lsls	r2, r3, #28
 8003e22:	d525      	bpl.n	8003e70 <__swbuf_r+0x68>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	b31b      	cbz	r3, 8003e70 <__swbuf_r+0x68>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	6922      	ldr	r2, [r4, #16]
 8003e2c:	1a98      	subs	r0, r3, r2
 8003e2e:	6963      	ldr	r3, [r4, #20]
 8003e30:	b2f6      	uxtb	r6, r6
 8003e32:	4283      	cmp	r3, r0
 8003e34:	4637      	mov	r7, r6
 8003e36:	dc04      	bgt.n	8003e42 <__swbuf_r+0x3a>
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f7ff ffbc 	bl	8003db8 <_fflush_r>
 8003e40:	b9e0      	cbnz	r0, 8003e7c <__swbuf_r+0x74>
 8003e42:	68a3      	ldr	r3, [r4, #8]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	60a3      	str	r3, [r4, #8]
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	6022      	str	r2, [r4, #0]
 8003e4e:	701e      	strb	r6, [r3, #0]
 8003e50:	6962      	ldr	r2, [r4, #20]
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d004      	beq.n	8003e62 <__swbuf_r+0x5a>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	07db      	lsls	r3, r3, #31
 8003e5c:	d506      	bpl.n	8003e6c <__swbuf_r+0x64>
 8003e5e:	2e0a      	cmp	r6, #10
 8003e60:	d104      	bne.n	8003e6c <__swbuf_r+0x64>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4628      	mov	r0, r5
 8003e66:	f7ff ffa7 	bl	8003db8 <_fflush_r>
 8003e6a:	b938      	cbnz	r0, 8003e7c <__swbuf_r+0x74>
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e70:	4621      	mov	r1, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f806 	bl	8003e84 <__swsetup_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0d5      	beq.n	8003e28 <__swbuf_r+0x20>
 8003e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e80:	e7f4      	b.n	8003e6c <__swbuf_r+0x64>
	...

08003e84 <__swsetup_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <__swsetup_r+0xac>)
 8003e88:	4605      	mov	r5, r0
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b118      	cbz	r0, 8003e98 <__swsetup_r+0x14>
 8003e90:	6a03      	ldr	r3, [r0, #32]
 8003e92:	b90b      	cbnz	r3, 8003e98 <__swsetup_r+0x14>
 8003e94:	f7ff fa36 	bl	8003304 <__sinit>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e9e:	0718      	lsls	r0, r3, #28
 8003ea0:	d422      	bmi.n	8003ee8 <__swsetup_r+0x64>
 8003ea2:	06d9      	lsls	r1, r3, #27
 8003ea4:	d407      	bmi.n	8003eb6 <__swsetup_r+0x32>
 8003ea6:	2309      	movs	r3, #9
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	e034      	b.n	8003f20 <__swsetup_r+0x9c>
 8003eb6:	0758      	lsls	r0, r3, #29
 8003eb8:	d512      	bpl.n	8003ee0 <__swsetup_r+0x5c>
 8003eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ebc:	b141      	cbz	r1, 8003ed0 <__swsetup_r+0x4c>
 8003ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ec2:	4299      	cmp	r1, r3
 8003ec4:	d002      	beq.n	8003ecc <__swsetup_r+0x48>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f7ff fb24 	bl	8003514 <_free_r>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6363      	str	r3, [r4, #52]	; 0x34
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6063      	str	r3, [r4, #4]
 8003edc:	6923      	ldr	r3, [r4, #16]
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	b94b      	cbnz	r3, 8003f00 <__swsetup_r+0x7c>
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef6:	d003      	beq.n	8003f00 <__swsetup_r+0x7c>
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 f850 	bl	8003fa0 <__smakebuf_r>
 8003f00:	89a0      	ldrh	r0, [r4, #12]
 8003f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f06:	f010 0301 	ands.w	r3, r0, #1
 8003f0a:	d00a      	beq.n	8003f22 <__swsetup_r+0x9e>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60a3      	str	r3, [r4, #8]
 8003f10:	6963      	ldr	r3, [r4, #20]
 8003f12:	425b      	negs	r3, r3
 8003f14:	61a3      	str	r3, [r4, #24]
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	b943      	cbnz	r3, 8003f2c <__swsetup_r+0xa8>
 8003f1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f1e:	d1c4      	bne.n	8003eaa <__swsetup_r+0x26>
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	0781      	lsls	r1, r0, #30
 8003f24:	bf58      	it	pl
 8003f26:	6963      	ldrpl	r3, [r4, #20]
 8003f28:	60a3      	str	r3, [r4, #8]
 8003f2a:	e7f4      	b.n	8003f16 <__swsetup_r+0x92>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e7f7      	b.n	8003f20 <__swsetup_r+0x9c>
 8003f30:	20000064 	.word	0x20000064

08003f34 <_sbrk_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d06      	ldr	r5, [pc, #24]	; (8003f50 <_sbrk_r+0x1c>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	f7fc fc7c 	bl	800083c <_sbrk>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_sbrk_r+0x1a>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_sbrk_r+0x1a>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	200002a8 	.word	0x200002a8

08003f54 <__swhatbuf_r>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	460c      	mov	r4, r1
 8003f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	b096      	sub	sp, #88	; 0x58
 8003f60:	4615      	mov	r5, r2
 8003f62:	461e      	mov	r6, r3
 8003f64:	da0d      	bge.n	8003f82 <__swhatbuf_r+0x2e>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	bf0c      	ite	eq
 8003f72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f76:	2340      	movne	r3, #64	; 0x40
 8003f78:	2000      	movs	r0, #0
 8003f7a:	6031      	str	r1, [r6, #0]
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	b016      	add	sp, #88	; 0x58
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	466a      	mov	r2, sp
 8003f84:	f000 f848 	bl	8004018 <_fstat_r>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	dbec      	blt.n	8003f66 <__swhatbuf_r+0x12>
 8003f8c:	9901      	ldr	r1, [sp, #4]
 8003f8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f96:	4259      	negs	r1, r3
 8003f98:	4159      	adcs	r1, r3
 8003f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9e:	e7eb      	b.n	8003f78 <__swhatbuf_r+0x24>

08003fa0 <__smakebuf_r>:
 8003fa0:	898b      	ldrh	r3, [r1, #12]
 8003fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fa4:	079d      	lsls	r5, r3, #30
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	d507      	bpl.n	8003fbc <__smakebuf_r+0x1c>
 8003fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	6123      	str	r3, [r4, #16]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6163      	str	r3, [r4, #20]
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	ab01      	add	r3, sp, #4
 8003fbe:	466a      	mov	r2, sp
 8003fc0:	f7ff ffc8 	bl	8003f54 <__swhatbuf_r>
 8003fc4:	9900      	ldr	r1, [sp, #0]
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f7ff fb0f 	bl	80035ec <_malloc_r>
 8003fce:	b948      	cbnz	r0, 8003fe4 <__smakebuf_r+0x44>
 8003fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd4:	059a      	lsls	r2, r3, #22
 8003fd6:	d4ef      	bmi.n	8003fb8 <__smakebuf_r+0x18>
 8003fd8:	f023 0303 	bic.w	r3, r3, #3
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	81a3      	strh	r3, [r4, #12]
 8003fe2:	e7e3      	b.n	8003fac <__smakebuf_r+0xc>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	6020      	str	r0, [r4, #0]
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	9b00      	ldr	r3, [sp, #0]
 8003ff0:	6163      	str	r3, [r4, #20]
 8003ff2:	9b01      	ldr	r3, [sp, #4]
 8003ff4:	6120      	str	r0, [r4, #16]
 8003ff6:	b15b      	cbz	r3, 8004010 <__smakebuf_r+0x70>
 8003ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f81d 	bl	800403c <_isatty_r>
 8004002:	b128      	cbz	r0, 8004010 <__smakebuf_r+0x70>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	431d      	orrs	r5, r3
 8004014:	81a5      	strh	r5, [r4, #12]
 8004016:	e7cf      	b.n	8003fb8 <__smakebuf_r+0x18>

08004018 <_fstat_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d07      	ldr	r5, [pc, #28]	; (8004038 <_fstat_r+0x20>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	f7fc fbe0 	bl	80007ea <_fstat>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	d102      	bne.n	8004034 <_fstat_r+0x1c>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	b103      	cbz	r3, 8004034 <_fstat_r+0x1c>
 8004032:	6023      	str	r3, [r4, #0]
 8004034:	bd38      	pop	{r3, r4, r5, pc}
 8004036:	bf00      	nop
 8004038:	200002a8 	.word	0x200002a8

0800403c <_isatty_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d06      	ldr	r5, [pc, #24]	; (8004058 <_isatty_r+0x1c>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fc fbdf 	bl	800080a <_isatty>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_isatty_r+0x1a>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_isatty_r+0x1a>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200002a8 	.word	0x200002a8

0800405c <_init>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr

08004068 <_fini>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr
